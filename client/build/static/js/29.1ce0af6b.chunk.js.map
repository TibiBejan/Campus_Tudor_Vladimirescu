{"version":3,"sources":["components/SharedComponents/AuthBanner/AuthBanner.js","components/SharedComponents/GeneralErrorMessage/GeneralErrorMessage.js","validation/UserSchema.js","components/AdminDashboard/AdminDashboardNav/AdminDashboardNav.js","components/AdminDashboard/AdminDashboardAccount/AdminDashboardAccount.js","pages/AdminDashboardAccountInfo.js","components/SharedComponents/Button/ButtonPrimary.js","components/SharedComponents/FormErrorMessage/ErrorMessage.js"],"names":["AuthBanner","sectionData","title","className","subtitle","isLink","to","path","pathLabel","GeneralErrorMessage","children","success","PASSWORD_REGEX","phoneRegExp","updatePwdSchema","yup","password_confirm","required","matches","password_new","password_new_confirm","when","is","val","length","then","oneOf","updateAccountDetailsSchema","first_name","min","last_name","email","createKinSchema","relation","adress","phone_number","createMetaSchema","username","dob","sex","nationality","city","state_province","country","zip_code","enrollSchema","university","type_of_study","year_of_study","grade","financial_type","student_gender","AdminDashboardNav","activeClassName","AdminDashboardAccount","dispatch","useDispatch","userState","useSelector","userSelector","useState","formError","setFormError","blockRef","useRef","formik","useFormik","initialValues","user","validateOnBlur","enableReinitialize","onSubmit","values","window","scrollTo","current","offsetTop","requestAccountUpdate","axios","patch","headers","withCredentials","credentials","response","status","data","receiveAccountUpdate","catch","err","message","errors","msg","updateAccountError","validationSchema","ref","method","handleSubmit","htmlFor","type","id","name","value","onChange","handleChange","ErrorMessage","ButtonPrimary","textLabel","bannerData","AdminDashboardAccountInfo","InitialTransition","Header","StatsSection","Footer","Button","disabled","onClick","Provider","color","size","ErrorMessageWrapper","styled","div","MessageLabel","p","ErrorMessageEl"],"mappings":"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","file":"static/js/29.1ce0af6b.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './AuthBanner.scss';\r\n\r\nfunction AuthBanner({ sectionData, title }) {\r\n    return (\r\n        <section className=\"auth-banner\">\r\n            <div className=\"auth-banner-content\">\r\n                <div className=\"content-heading-wrapper\">\r\n                    <h1 className=\"content-heading-title heading-one\">{title ? title : 'Portalul utilizatorului'}</h1>\r\n                </div>\r\n                <div className=\"content-subtitle-wrapper\">\r\n                    <h3 className=\"content-subtitle heading-three\">{sectionData.subtitle}</h3>\r\n                    {sectionData.isLink && \r\n                        <Link to={sectionData.path} className=\"content-link-wrapper\">\r\n                            <span className=\"content-link-label label-large\">{sectionData.pathLabel}</span>\r\n                        </Link>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default AuthBanner;","import React from 'react';\r\nimport './GeneralErrorMessage.scss';\r\n\r\nfunction GeneralErrorMessage({ children, success }) {\r\n    return (\r\n        <div className=\"general-error\">\r\n            <div className=\"general-error-inner\">\r\n                <span className=\"link-label\">{success ? 'Success:' : 'Error:'}<span className=\"label\">{children}</span></span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GeneralErrorMessage;\r\n","// FORM LIBRARY\r\nimport * as yup from 'yup';\r\n\r\n// PWD REGET EXPRESSION\r\nconst PASSWORD_REGEX = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\r\nconst phoneRegExp = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\r\n\r\n// UPDATE PASSWORD SCHEMA\r\nexport const updatePwdSchema = yup.object({\r\n    password_confirm: yup.string().required(\"You must enter a password\").matches(PASSWORD_REGEX, \"Your password must contain: minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character\"),\r\n    password_new: yup.string().required(\"You must enter a password\").matches(PASSWORD_REGEX, \"Your password must contain: minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character\"),\r\n    password_new_confirm: yup.string().required(\"You must enter a password confirm\").when(\"password\", {\r\n        is: val => (val && val.length > 0 ? true : false),\r\n        then: yup.string().oneOf([yup.ref(\"password_new\")], \"Your confirm password does not match, please try again\")\r\n    })\r\n});\r\n\r\n// REGISTER SCHEMA\r\nexport const updateAccountDetailsSchema = yup.object({\r\n    first_name: yup.string().required(\"You must enter your first name\").min(3, \"Your first name should contain al least 3 characters\"),\r\n    last_name: yup.string().required(\"You must enter your last name\").min(3, \"Your last name should contain al least 3 characters\"),\r\n    email: yup.string().required(\"You must enter your e-mail adress\").email(\"Please enter a valid e-mail adress\"),\r\n}); \r\n\r\n// KIN SCHEMA\r\nexport const createKinSchema = yup.object({\r\n    first_name: yup.string().required(\"You must enter your kin's first name\").min(3, \"Your kin first name should contain al least 3 characters\"),\r\n    last_name: yup.string().required(\"You must enter your kin's last name\").min(3, \"Your kin last name should contain al least 3 characters\"),\r\n    email: yup.string().required(\"You must enter your kin's e-mail adress\").email(\"Please enter a valid e-mail adress of your kin\"),\r\n    relation: yup.string().required(\"You must enter your kin relation\").min(3, \"Your relation should contain al least 3 characters\"),\r\n    adress: yup.string().required(\"You must enter your kin' adress\"),\r\n    phone_number: yup.string().required(\"You must enter your kin' phone number\").matches(phoneRegExp, \"Your kin's phone number is not valid\")\r\n}); \r\n\r\n// STUDENT META SCHEMA\r\nexport const createMetaSchema = yup.object({\r\n    username: yup.string().required(\"You must enter your username\").min(3, \"Your username should contain al least 3 characters\"),\r\n    dob: yup.date().required(\"You must enter your date of birth\"),\r\n    sex: yup.string().required(\"You must select your gender\"),\r\n    nationality: yup.string().required(\"You must enter your nationality\"),\r\n    phone_number: yup.string().required(\"You must enter your phone number\").matches(phoneRegExp, \"Your kin's phone number is not valid\"),\r\n    adress: yup.string().required(\"You must enter your adress\"),\r\n    city: yup.string().required(\"You must enter your city\"),\r\n    state_province: yup.string().required(\"You must enter your state or province\"),\r\n    country: yup.string().required(\"You must enter your country\"),\r\n    zip_code: yup.string().required(\"You must enter your zip_code\"),\r\n}); \r\n\r\n// STUDENT ENROLLMENT SCHEMA\r\nexport const enrollSchema = yup.object({\r\n    university: yup.string().required(\"You must select your university\"),\r\n    type_of_study: yup.string().required(\"You must select your type of study\"),\r\n    year_of_study: yup.number().required(\"You must select your year of study\"),\r\n    grade: yup.number().required(\"You must enter your previous year grade\"),\r\n    financial_type: yup.string().required(\"You must enter your financial type\"),\r\n    nationality: yup.string().required(\"You must enter your nationality\"),\r\n    student_gender: yup.string().required(\"You must enter select your gender\")\r\n}); \r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport './AdminDashboardNav.scss';\r\n\r\nfunction AdminDashboardNav() {\r\n\r\n    return (\r\n        <ul className=\"dashboard-admin-nav\">\r\n            <li className=\"dashboard-admin-nav-list-item\">\r\n                <NavLink \r\n                    to='/admin' \r\n                    activeClassName=\"selected\" \r\n                    className=\"dashboard-nav-link\"\r\n                >\r\n                    <span className=\"label-medium\">Dashboard</span>\r\n                </NavLink>\r\n            </li>\r\n            <li className=\"dashboard-admin-nav-list-item\">\r\n                <NavLink \r\n                    to='/admin-blog' \r\n                    activeClassName=\"selected\" \r\n                    className=\"dashboard-nav-link\"\r\n                >\r\n                    <span className=\"label-medium\">Blog</span>\r\n                </NavLink>\r\n            </li>\r\n            <li className=\"dashboard-admin-nav-list-item\">\r\n                <NavLink \r\n                    to='/admin-appoitments' \r\n                    activeClassName=\"selected\" \r\n                    className=\"dashboard-nav-link\"\r\n                >\r\n                    <span className=\"label-medium\">Appoitments</span>\r\n                </NavLink>\r\n            </li>\r\n            <li className=\"dashboard-admin-nav-list-item\">\r\n                <NavLink \r\n                    to='/admin-create' \r\n                    activeClassName=\"selected\" \r\n                    className=\"dashboard-nav-link\"\r\n                >\r\n                    <span className=\"label-medium\">Create student</span>\r\n                </NavLink>\r\n            </li>\r\n            <li className=\"dashboard-admin-nav-list-item\">\r\n                <NavLink \r\n                    to='/admin-details' \r\n                    activeClassName=\"selected\" \r\n                    className=\"dashboard-nav-link\"\r\n                >\r\n                    <span className=\"label-medium\">Update account</span>\r\n                </NavLink>\r\n            </li>\r\n            <li className=\"dashboard-admin-nav-list-item\">\r\n                <NavLink \r\n                    to='/admin-password' \r\n                    activeClassName=\"selected\" \r\n                    className=\"dashboard-nav-link\"\r\n                >\r\n                    <span className=\"label-medium\">Update password</span>\r\n                </NavLink>\r\n            </li>\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default AdminDashboardNav;\r\n","import React, { useState, useRef } from 'react';\r\nimport AdminDashboardNav from '../AdminDashboardNav/AdminDashboardNav';\r\nimport ErrorMessageEl from '../../SharedComponents/FormErrorMessage/ErrorMessage';\r\nimport GeneralErrorMessage from '../../SharedComponents/GeneralErrorMessage/GeneralErrorMessage';\r\nimport ButtonPrimary from '../../SharedComponents/Button/ButtonPrimary';\r\nimport axios from 'axios';\r\n\r\nimport { useFormik } from 'formik';\r\nimport { updateAccountDetailsSchema } from '../../../validation/UserSchema';\r\n\r\n// REUDX\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { requestAccountUpdate, receiveAccountUpdate, updateAccountError, userSelector } from '../../../redux/userSlice';\r\n\r\nimport './AdminDashboardAccount.scss';\r\n\r\nfunction AdminDashboardAccount() {\r\n\r\n    // GLOBAL STATE SLICE\r\n    const dispatch = useDispatch();\r\n    const userState = useSelector(userSelector);\r\n    // STATE\r\n    const [ formError, setFormError ] = useState('');\r\n    // REF\r\n    const blockRef = useRef(null)\r\n\r\n    // RESET SCROLL POS\r\n    const executeScroll = () => window.scrollTo(0, blockRef.current.offsetTop);  \r\n\r\n    const onSubmit = (values) => {\r\n\r\n        // RESET SCROLL POSITION\r\n        executeScroll();\r\n\r\n        const reqConfig = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                withCredentials: true,\r\n                credentials: 'include'\r\n            },\r\n        }\r\n\r\n        // INIT REQ\r\n        dispatch(requestAccountUpdate());\r\n\r\n        // /api/v1/users/updateMe\r\n            \r\n        axios.patch(\"/api/v1/users/updateMe\", values, reqConfig).then((response) => {\r\n            if(response.status === 200 || response.status === 201) {\r\n                const { user } = response.data;\r\n                dispatch(receiveAccountUpdate(user));\r\n                setFormError('');\r\n            }\r\n        }).catch(err => {\r\n            const message = err.response.data.errors ? err.response.data.errors[0].msg : err.response.data.message;\r\n            dispatch(updateAccountError(message));\r\n            setFormError(message);\r\n        });\r\n        \r\n    }\r\n\r\n    // FORM HANDLER\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            first_name: userState.user.first_name,\r\n            last_name: userState.user.last_name,\r\n            email: userState.user.email\r\n        },\r\n        validateOnBlur: true,\r\n        enableReinitialize: true,\r\n        onSubmit,\r\n        validationSchema: updateAccountDetailsSchema\r\n    });\r\n\r\n    return (\r\n        <section className=\"dashboard-account-update\">\r\n            <div className=\"dashboard-account-update-inner\">\r\n                <AdminDashboardNav />\r\n                <div className=\"dashboard-form-block\" ref={blockRef}>\r\n                    <div className=\"dashboard-form-block-heading-wrapper\">\r\n                        <h3 className=\"dashboard-form-title heading-three\">Actualizeaza-ti informatiile contului</h3>    \r\n                        {formError ? <GeneralErrorMessage>{formError}</GeneralErrorMessage> : null }    \r\n                    </div>\r\n                    <form className=\"dashboard-account-update-form\" method=\"POST\" onSubmit={ formik.handleSubmit }>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"firstName\" className=\"form-group-label label\">Prenumele dvs.*</label>\r\n                            <input \r\n                                type=\"text\" \r\n                                id=\"firstName\" \r\n                                className=\"form-group-input\" \r\n                                name=\"first_name\"\r\n                                value={formik.values.first_name}\r\n                                onChange={formik.handleChange}\r\n                            />\r\n                        {formik.errors.first_name && <ErrorMessageEl>{formik.errors.first_name}</ErrorMessageEl>}\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"lastName\" className=\"form-group-label label\">Numele dvs.*</label>\r\n                            <input \r\n                                type=\"text\" \r\n                                id=\"lastName\" \r\n                                className=\"form-group-input\"\r\n                                name=\"last_name\"\r\n                                value={formik.values.last_name}\r\n                                onChange={formik.handleChange}\r\n                            />\r\n                            {formik.errors.last_name && <ErrorMessageEl>{formik.errors.last_name}</ErrorMessageEl>}\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"email\" className=\"form-group-label label\">Email-ul dvs.*</label>\r\n                            <input \r\n                                type=\"email\" \r\n                                id=\"email\" \r\n                                className=\"form-group-input\"\r\n                                name=\"email\"\r\n                                value={formik.values.email}\r\n                                onChange={formik.handleChange}\r\n                            />\r\n                            {formik.errors.email && <ErrorMessageEl>{formik.errors.email}</ErrorMessageEl>}       \r\n                        </div>\r\n                        <ButtonPrimary type=\"submit\" textLabel=\"Actualizeaza\" />\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default AdminDashboardAccount;\r\n","import React from 'react'\r\nimport InitialTransition from '../utils/InitialTransition/InitialTransition';\r\n\r\n// COMPONENTS\r\nimport Header from '../components/LayoutComponents/Header/Header';\r\nimport AuthBanner from '../components/SharedComponents/AuthBanner/AuthBanner';\r\nimport AdminDashboardAccount from '../components/AdminDashboard/AdminDashboardAccount/AdminDashboardAccount';\r\nimport StatsSection from '../components/SharedComponents/StatsSection/StatsSection';\r\nimport Footer from '../components/LayoutComponents/Footer/Footer';\r\n\r\n// DATA\r\nconst bannerData = {\r\n    isLink: null,\r\n    subtitle: \"Contul meu\"\r\n}\r\n\r\nfunction AdminDashboardAccountInfo() {\r\n    return (\r\n        <>\r\n            <InitialTransition />\r\n            <Header />\r\n            <main className=\"page-content\">\r\n                <AuthBanner sectionData={ bannerData } title=\"Panoul administratorului\"/>    \r\n                <AdminDashboardAccount />\r\n                <StatsSection />\r\n            </main>\r\n            <Footer /> \r\n        </>\r\n    )\r\n}\r\n\r\nexport default AdminDashboardAccountInfo","import React from 'react';\r\nimport { IconContext } from 'react-icons';\r\nimport { BsArrowRight } from \"react-icons/bs\";\r\nimport './ButtonPrimary.scss';\r\n\r\nfunction Button({ type, disabled, onClick, textLabel }) {\r\n    return (\r\n        <button type={type} disabled={disabled} onClick={onClick} className=\"button-primary\">\r\n            <span className=\"button-primary-label label\">{textLabel}</span>\r\n            <IconContext.Provider value={{color: '#fafafa', size: '30px'}}>\r\n                <BsArrowRight />\r\n            </IconContext.Provider>\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst ErrorMessageWrapper = styled.div`\r\n    width: 100%;\r\n    padding: 2.5rem 0;\r\n    display: flex;\r\n    justify-content: flex-start;\r\n    align-items: center;\r\n    text-align: start;\r\n    transition: var(--hover-transition);\r\n`;\r\n\r\nconst MessageLabel = styled.p`\r\n    font-size: 1.6rem;\r\n    font-weight: 500;\r\n    letter-spacing: 0.1rem;\r\n    color: #a50000;\r\n    transition: var(--hover-transition);\r\n`;\r\n\r\nfunction ErrorMessageEl ({ children }) {\r\n    return (\r\n        <ErrorMessageWrapper>\r\n            <MessageLabel>{children}</MessageLabel>\r\n        </ErrorMessageWrapper>\r\n    )\r\n}\r\n\r\nexport default ErrorMessageEl;\r\n"],"sourceRoot":""}