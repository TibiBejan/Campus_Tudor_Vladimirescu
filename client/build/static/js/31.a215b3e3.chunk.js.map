{"version":3,"sources":["validation/AuthSchema.js","data/AuthData.js","components/auth/ForgotPasswordComponent/ForgotPasswordComponent.js","pages/ForgotPassword.js"],"names":["PASSWORD_REGEX","loginSchema","yup","email","required","password","matches","registerSchema","first_name","min","last_name","password_confirm","when","is","val","length","then","oneOf","forgotPwdSchema","resetPwdSchema","loginBannerData","isLink","path","pathLabel","subtitle","registerBannerData","forgotPasswordBannerData","resetPasswordBannerData","ForgotPasswordComponent","useState","formError","setFormError","currentEmail","setCurrentEmail","blockRef","useRef","onSubmit","values","a","window","scrollTo","current","offsetTop","reqConfig","headers","withCredentials","credentials","axios","post","response","status","catch","err","message","data","formik","useFormik","initialValues","validateOnBlur","validationSchema","className","ref","ErrorMessage","method","handleSubmit","htmlFor","type","id","name","value","onChange","handleChange","errors","ButtonPrimary","textLabel","ForgotPassword","InitialTransition","Header","AuthBanner","sectionData","StatsSection","Footer"],"mappings":"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","file":"static/js/31.a215b3e3.chunk.js","sourcesContent":["// FORM LIBRARY\r\nimport * as yup from 'yup';\r\n\r\n// PWD REGET EXPRESSION\r\nconst PASSWORD_REGEX = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\r\n\r\n// LOGIN SCHEMA\r\nexport const loginSchema = yup.object({\r\n    email: yup.string().required(\"You must enter your e-mail adress\").email(\"Please enter a valid e-mail adress\"),\r\n    password: yup.string().required(\"You must enter a password\").matches(PASSWORD_REGEX, \"Your password must contain: minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character\")\r\n});\r\n\r\n// REGISTER SCHEMA\r\nexport const registerSchema = yup.object({\r\n    first_name: yup.string().required(\"You must enter your first name\").min(3, \"Your first name should contain al least 3 characters\"),\r\n    last_name: yup.string().required(\"You must enter your last name\").min(3, \"Your last name should contain al least 3 characters\"),\r\n    email: yup.string().required(\"You must enter your e-mail adress\").email(\"Please enter a valid e-mail adress\"),\r\n    password: yup.string().required(\"You must enter a password\").matches(PASSWORD_REGEX, \"Your password must contain: minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character\"),\r\n    password_confirm: yup.string().required(\"You must enter a password confirm\").when(\"password\", {\r\n        is: val => (val && val.length > 0 ? true : false),\r\n        then: yup.string().oneOf([yup.ref(\"password\")], \"Your confirm password does not match, please try again\")\r\n    })\r\n}); \r\n\r\n// FORGOT PASSWORD SCHEMA\r\nexport const forgotPwdSchema = yup.object({\r\n    email: yup.string().required(\"You must enter your e-mail adress\").email(\"Please enter a valid e-mail adress\"),\r\n});\r\n\r\n// RESET PASSWORD SCHEMA\r\nexport const resetPwdSchema = yup.object({\r\n    password: yup.string().required(\"You must enter a password\").matches(PASSWORD_REGEX, \"Your password must contain: minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character\"),\r\n    password_confirm: yup.string().required(\"You must enter a password confirm\").when(\"password\", {\r\n        is: val => (val && val.length > 0 ? true : false),\r\n        then: yup.string().oneOf([yup.ref(\"password\")], \"Your confirm password does not match, please try again\")\r\n    })\r\n});\r\n\r\n\r\n","export const loginBannerData =  {\r\n    isLink: true,\r\n    path: '/register',\r\n    pathLabel: 'Register',\r\n    subtitle: \"Don't have an account?\"\r\n}\r\n\r\nexport const registerBannerData = {\r\n    isLink: true,\r\n    path: '/login',\r\n    pathLabel: 'Login',\r\n    subtitle: \"Alreaday a member of our family? Join your account\"\r\n}\r\n\r\nexport const forgotPasswordBannerData = {\r\n    isLink: null,\r\n    subtitle: \"Reset your password and join our family.\"\r\n}\r\n\r\nexport const resetPasswordBannerData = {\r\n    isLink: null,\r\n    subtitle: \"Enter a new password and we will redirect you to login page.\"\r\n}\r\n","import React, { useState, useRef } from 'react';\r\nimport ErrorMessageEl from '../../SharedComponents/FormErrorMessage/ErrorMessage';\r\nimport ButtonPrimary from '../../SharedComponents/Button/ButtonPrimary';\r\n\r\nimport { useFormik } from 'formik';\r\nimport { forgotPwdSchema } from '../../../validation/AuthSchema';\r\nimport axios from 'axios';\r\n\r\nimport './ForgotPasswordComponent.scss';\r\n\r\nfunction ForgotPasswordComponent() {\r\n\r\n    // STATE\r\n    const [ formError, setFormError ] = useState('');\r\n    const [ currentEmail, setCurrentEmail ] = useState('');\r\n    // REF\r\n    const blockRef = useRef(null)\r\n    // RESET SCROLL POS\r\n    const executeScroll = () => window.scrollTo(0, blockRef.current.offsetTop);  \r\n\r\n    const onSubmit = async (values) => {\r\n\r\n        executeScroll();\r\n        \r\n        const reqConfig = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                \"Access-Control-Allow-Origin\": \"*\",\r\n                withCredentials: true,\r\n                credentials: 'include'\r\n            },\r\n        }\r\n\r\n        ///api/v1/users/forgotPassword\r\n\r\n        // fetch(\"https://campus-tudor-vladimirescu.herokuapp.com/api/v1/users/forgotPassword\", {\r\n        //     method: 'post',\r\n        //     body: values,\r\n        //     headers: reqConfig\r\n        // })\r\n        // .then((res) => res.json())\r\n        // .then((data) => {\r\n        //   if(data.status === 200 || data.status === 201) {\r\n        //     const { userData } = data.data;\r\n        //     dispatch(receiveCheckLogin(userData));\r\n        //     } else {\r\n        //         dispatch(checkLoginError('There is an error, please try again'));\r\n        //     }\r\n        // }).catch(err => {\r\n            \r\n        //         const { message } = err.response.data;\r\n        //         dispatch(checkLoginError(message ? message : ''));\r\n        // });\r\n\r\n\r\n        axios.post(\"https://campus-tudor-vladimirescu.herokuapp.com/api/v1/users/forgotPassword\", values, reqConfig).then((response) => {\r\n            if(response.status === 200 || response.status === 201) {\r\n                setCurrentEmail(values);\r\n            } else {\r\n                setFormError('There is an error, please try again');\r\n            }\r\n        }).catch(err => {\r\n            const { message } = err.response.data;\r\n            setFormError(message);\r\n        });\r\n    }\r\n\r\n    // FORM HANDLER\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n        },\r\n        validateOnBlur: true,\r\n        onSubmit,\r\n        validationSchema: forgotPwdSchema\r\n    });\r\n\r\n    return (\r\n        <section className=\"forgot-password-section\" ref={blockRef}>\r\n            <div className=\"forgot-password-section-inner\">\r\n                <div className=\"forgot-password-content\">\r\n                    { currentEmail ? (\r\n                        <>\r\n                            <div className=\"forgot-password-paragraph-wrapper\">\r\n                                <p className=\"forgot-password-paragraph paragraph-quote-large\">An email has been sent to your e-mail adress. Please follow the provided instructions to reset your password.</p>\r\n                            </div>\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                            <div className=\"forgot-password-paragraph-wrapper\">\r\n                                <p className=\"forgot-password-paragraph paragraph-quote-large\">Forgot your password ? Please enter your username or email address. You will receive a link by email to create a new password.</p>\r\n                                {formError ? <ErrorMessageEl>{formError}</ErrorMessageEl> : null }\r\n                            </div>\r\n                            <form className=\"forgot-password-form\" method=\"POST\" onSubmit={ formik.handleSubmit }>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"email\" className=\"form-group-label label\">Introduceti e-mail-ul dvs.*</label>\r\n                                    <input \r\n                                        type=\"text\" \r\n                                        id=\"email\" \r\n                                        className=\"form-group-input\"\r\n                                        name=\"email\"\r\n                                        value={formik.values.email}\r\n                                        onChange={formik.handleChange}\r\n                                    />\r\n                                    {formik.errors.email && <ErrorMessageEl>{formik.errors.email}</ErrorMessageEl>}  \r\n                                </div>\r\n                                <ButtonPrimary type=\"submit\" textLabel=\"Reset Password\" />\r\n                            </form>\r\n                        </>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default ForgotPasswordComponent;\r\n","import React from 'react';\r\nimport InitialTransition from '../utils/InitialTransition/InitialTransition';\r\n\r\n// COMPONENTS\r\nimport Header from '../components/LayoutComponents/Header/Header';\r\nimport AuthBanner from '../components/SharedComponents/AuthBanner/AuthBanner';\r\nimport ForgotPasswordComponent from '../components/auth/ForgotPasswordComponent/ForgotPasswordComponent'\r\nimport StatsSection from '../components/SharedComponents/StatsSection/StatsSection';\r\nimport Footer from '../components/LayoutComponents/Footer/Footer';\r\nimport {forgotPasswordBannerData} from '../data/AuthData';\r\n\r\nfunction ForgotPassword() {\r\n    return (\r\n        <>\r\n            <InitialTransition />\r\n            <Header />\r\n            <main className=\"page-content\">\r\n                <AuthBanner  sectionData={ forgotPasswordBannerData }/> \r\n                <ForgotPasswordComponent />\r\n                <StatsSection />\r\n            </main>\r\n            <Footer />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ForgotPassword;"],"sourceRoot":""}