{"version":3,"sources":["validation/AuthSchema.js","data/AuthData.js","components/auth/LoginComponent/LoginComponent.js","pages/Login.js"],"names":["PASSWORD_REGEX","loginSchema","yup","email","required","password","matches","registerSchema","first_name","min","last_name","password_confirm","when","is","val","length","then","oneOf","forgotPwdSchema","resetPwdSchema","loginBannerData","isLink","path","pathLabel","subtitle","registerBannerData","forgotPasswordBannerData","resetPasswordBannerData","LoginComponent","dispatch","useDispatch","history","useHistory","useState","formError","setFormError","visiblePassword","setVisiblePassword","blockRef","useRef","onSubmit","values","a","window","scrollTo","current","offsetTop","user","reqConfig","headers","withCredentials","credentials","requestLogin","axios","post","response","userData","data","status","receiveLogin","push","loginError","catch","err","message","formik","useFormik","initialValues","validateOnBlur","validationSchema","className","ref","ErrorMessage","method","handleSubmit","htmlFor","type","id","name","value","onChange","handleChange","errors","onClick","prevState","Provider","size","color","ButtonPrimary","textLabel","to","Login","InitialTransition","Header","AuthBanner","sectionData","StatsSection","Footer"],"mappings":"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","file":"static/js/32.7edebc49.chunk.js","sourcesContent":["// FORM LIBRARY\r\nimport * as yup from 'yup';\r\n\r\n// PWD REGET EXPRESSION\r\nconst PASSWORD_REGEX = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\r\n\r\n// LOGIN SCHEMA\r\nexport const loginSchema = yup.object({\r\n    email: yup.string().required(\"You must enter your e-mail adress\").email(\"Please enter a valid e-mail adress\"),\r\n    password: yup.string().required(\"You must enter a password\").matches(PASSWORD_REGEX, \"Your password must contain: minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character\")\r\n});\r\n\r\n// REGISTER SCHEMA\r\nexport const registerSchema = yup.object({\r\n    first_name: yup.string().required(\"You must enter your first name\").min(3, \"Your first name should contain al least 3 characters\"),\r\n    last_name: yup.string().required(\"You must enter your last name\").min(3, \"Your last name should contain al least 3 characters\"),\r\n    email: yup.string().required(\"You must enter your e-mail adress\").email(\"Please enter a valid e-mail adress\"),\r\n    password: yup.string().required(\"You must enter a password\").matches(PASSWORD_REGEX, \"Your password must contain: minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character\"),\r\n    password_confirm: yup.string().required(\"You must enter a password confirm\").when(\"password\", {\r\n        is: val => (val && val.length > 0 ? true : false),\r\n        then: yup.string().oneOf([yup.ref(\"password\")], \"Your confirm password does not match, please try again\")\r\n    })\r\n}); \r\n\r\n// FORGOT PASSWORD SCHEMA\r\nexport const forgotPwdSchema = yup.object({\r\n    email: yup.string().required(\"You must enter your e-mail adress\").email(\"Please enter a valid e-mail adress\"),\r\n});\r\n\r\n// RESET PASSWORD SCHEMA\r\nexport const resetPwdSchema = yup.object({\r\n    password: yup.string().required(\"You must enter a password\").matches(PASSWORD_REGEX, \"Your password must contain: minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character\"),\r\n    password_confirm: yup.string().required(\"You must enter a password confirm\").when(\"password\", {\r\n        is: val => (val && val.length > 0 ? true : false),\r\n        then: yup.string().oneOf([yup.ref(\"password\")], \"Your confirm password does not match, please try again\")\r\n    })\r\n});\r\n\r\n\r\n","export const loginBannerData =  {\r\n    isLink: true,\r\n    path: '/register',\r\n    pathLabel: 'Register',\r\n    subtitle: \"Don't have an account?\"\r\n}\r\n\r\nexport const registerBannerData = {\r\n    isLink: true,\r\n    path: '/login',\r\n    pathLabel: 'Login',\r\n    subtitle: \"Alreaday a member of our family? Join your account\"\r\n}\r\n\r\nexport const forgotPasswordBannerData = {\r\n    isLink: null,\r\n    subtitle: \"Reset your password and join our family.\"\r\n}\r\n\r\nexport const resetPasswordBannerData = {\r\n    isLink: null,\r\n    subtitle: \"Enter a new password and we will redirect you to login page.\"\r\n}\r\n","import React, { useState, useRef } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport ErrorMessageEl from '../../SharedComponents/FormErrorMessage/ErrorMessage';\r\nimport ButtonPrimary from '../../SharedComponents/Button/ButtonPrimary';\r\nimport { IconContext } from 'react-icons';\r\nimport { ImEye } from \"react-icons/im\";\r\n\r\nimport { useFormik } from 'formik';\r\nimport { loginSchema } from '../../../validation/AuthSchema';\r\nimport { useDispatch } from 'react-redux';\r\nimport { requestLogin, receiveLogin, loginError } from '../../../redux/userSlice';\r\nimport { useHistory } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nimport './LoginComponent.scss';\r\n\r\nfunction LoginComponent() {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    // STATE\r\n    const [ formError, setFormError ] = useState('');\r\n    const [ visiblePassword, setVisiblePassword ] = useState(false);\r\n    // REF\r\n    const blockRef = useRef(null)\r\n\r\n    // RESET SCROLL POS\r\n    const executeScroll = () => window.scrollTo(0, blockRef.current.offsetTop);  \r\n\r\n    const onSubmit = async (values) => {\r\n\r\n        // RESET SCROLL POSITION\r\n        executeScroll();\r\n        \r\n        const user = {\r\n            email: values.email,\r\n            password: values.password\r\n        }\r\n\r\n        const reqConfig = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                withCredentials: true,\r\n                credentials: 'include'\r\n            },\r\n        }\r\n\r\n        // INIT REQ\r\n        dispatch(requestLogin());\r\n\r\n        ///api/v1/users/login\r\n\r\n        axios.post(\"https://campus-tudor-vladimirescu.herokuapp.com/api/v1/users/login\", user, reqConfig).then((response) => {\r\n            const { userData } = response.data;\r\n            \r\n            if(response.status === 200 || response.status === 201) {\r\n                dispatch(receiveLogin(userData));\r\n                history.push('/');\r\n            } else {\r\n                dispatch(loginError('There is an error, please try again'));\r\n            }\r\n        }).catch(err => {\r\n            const { message } = err.response.data;\r\n            setFormError(message);\r\n            dispatch(loginError(message));\r\n        });\r\n    }\r\n\r\n    // FORM HANDLER\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n        },\r\n        validateOnBlur: true,\r\n        onSubmit,\r\n        validationSchema: loginSchema\r\n    });\r\n\r\n    return (\r\n        <section className=\"user-login-wrapper\" ref={blockRef}>\r\n            <div className=\"user-login-inner\">\r\n                <div className=\"user-login-heading-wrapper\">\r\n                    <h3 className=\"user-login-title heading-three\">Log In</h3>    \r\n                    {formError ? <ErrorMessageEl>{formError}</ErrorMessageEl> : null }    \r\n                </div>\r\n                <form className=\"user-login-form\" method=\"POST\" onSubmit={ formik.handleSubmit }>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"username\" className=\"form-group-label label\">Numele utilizatorului sau e-mail-ul dvs..*</label>\r\n                        <input \r\n                            type=\"text\" \r\n                            id=\"username\" \r\n                            className=\"form-group-input\"\r\n                            name=\"email\"\r\n                            value={formik.values.email}\r\n                            onChange={formik.handleChange}\r\n                        />\r\n                        {formik.errors.email && <ErrorMessageEl>{formik.errors.email}</ErrorMessageEl>}  \r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"password\" className=\"form-group-label label\">Parola dvs..*</label>\r\n                        <div className=\"input-wrapper\">\r\n                            <input \r\n                                type={visiblePassword ? \"text\" : \"password\"}\r\n                                id=\"password\" \r\n                                className=\"form-group-input\"\r\n                                name=\"password\"\r\n                                value={formik.values.password}\r\n                                onChange={formik.handleChange}\r\n                            />\r\n                            <button type=\"button\" onClick={() => setVisiblePassword(prevState => !prevState)} className=\"show-password-button\">\r\n                                <IconContext.Provider value={{size: '30px', color: visiblePassword ? '#464646' : '#fafafa'}}>\r\n                                    <ImEye />\r\n                                </IconContext.Provider>\r\n                            </button>\r\n                        </div>\r\n                        {formik.errors.password && <ErrorMessageEl>{formik.errors.password}</ErrorMessageEl>}  \r\n                    </div>\r\n                    <ButtonPrimary type=\"submit\" textLabel=\"Conectare\" />\r\n                </form>\r\n                <Link to=\"/forgot-password\" className=\"link-wrapper\">\r\n                    <span className=\"link-wrapper-label label-medium\">Forgot your password?</span>\r\n                </Link>\r\n            </div>     \r\n        </section>\r\n    )\r\n}\r\n\r\nexport default LoginComponent;","import React from 'react';\r\nimport InitialTransition from '../utils/InitialTransition/InitialTransition';\r\n\r\n// COMPONENTS\r\nimport Header from '../components/LayoutComponents/Header/Header';\r\nimport AuthBanner from '../components/SharedComponents/AuthBanner/AuthBanner';\r\nimport LoginComponent from '../components/auth/LoginComponent/LoginComponent';\r\nimport StatsSection from '../components/SharedComponents/StatsSection/StatsSection';\r\nimport Footer from '../components/LayoutComponents/Footer/Footer';\r\nimport {loginBannerData} from '../data/AuthData';\r\n\r\n\r\nfunction Login() {\r\n    return (\r\n        <>\r\n            <InitialTransition />\r\n            <Header />\r\n            <main className=\"page-content\">\r\n                <AuthBanner sectionData={ loginBannerData }/>\r\n                <LoginComponent />\r\n                <StatsSection />\r\n            </main>   \r\n            <Footer />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Login;"],"sourceRoot":""}