{"version":3,"sources":["components/AdminDashboard/AdminDashboardSearch/AdminDashboardSearch.js","assets/images/delete-illustration.svg","components/SharedComponents/DeleteModal/DeleteModal.js","components/AdminDashboard/AdminDashboardPagination/AdminDashboardPagination.js","components/AdminDashboard/AdminDashboardMain/AdminDashboardMain.js","pages/AdminDashboard.js"],"names":["AdminDashboardSearch","dispatch","useDispatch","useState","formError","setFormError","blockRef","useRef","useEffect","requestStudents","axios","get","headers","withCredentials","credentials","then","response","students","data","receiveStudents","catch","err","message","studentsError","onSubmit","values","a","window","scrollTo","current","offsetTop","reqConfig","reqUrl","university","searchQuerry","rows","length","formik","useFormik","initialValues","validateOnBlur","enableReinitialize","validationSchema","adminSearchSchema","className","ref","GeneralErrorMessage","method","handleSubmit","htmlFor","type","id","name","value","onChange","handleChange","errors","ErrorMessage","label","textLabel","DeleteModal","handleDelete","toggleModal","toggled","document","body","style","overflow","overflowY","src","deleteIllustation","alt","onClick","AdminDashboardPagination","studentsData","history","useHistory","pageNumber","setPageNumber","modalOpen","setModalOpen","studentId","setStudentId","error","setError","tuiasiLogo","require","default","executeScroll","pagesVisited","pageCount","Math","ceil","displayUsers","slice","map","student","index","status","Enrollment","undefined","hallId","first_name","last_name","requestSelectedUser","user","receiveSelectedUser","push","uuid","selectedUserError","dispatchSelectedStudent","Provider","size","color","requestDeleteStudents","delete","receiveDeleteStudents","studentsDeleteError","previousLabel","nextLabel","onPageChange","selected","containerClassName","previousLinkClassName","nextLinkClassName","disabledClassName","activeClassName","AdminDashboardMain","adminState","useSelector","adminSelector","AdminDashboardNav","Object","keys","bannerData","isLink","subtitle","AdminDashboard","InitialTransition","Header","AuthBanner","sectionData","title","StatsSection","Footer"],"mappings":"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","file":"static/js/22.2d355380.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport ErrorMessageEl from '../../SharedComponents/FormErrorMessage/ErrorMessage';\r\nimport GeneralErrorMessage from '../../SharedComponents/GeneralErrorMessage/GeneralErrorMessage';\r\nimport Button from '../../SharedComponents/Button/ButtonPrimary';\r\nimport axios from 'axios';\r\n\r\nimport { useFormik } from 'formik';\r\nimport { adminSearchSchema } from '../../../validation/AdminSchema';\r\n\r\n// REUDX\r\nimport { useDispatch } from 'react-redux';\r\nimport { requestStudents, receiveStudents, studentsError } from '../../../redux/adminSlice';\r\n\r\nimport './AdminDashboardSearch.scss';\r\n\r\nfunction AdminDashboardSearch() {\r\n\r\n     // GLOBAL STATE SLICE\r\n    const dispatch = useDispatch();\r\n    // STATE\r\n    const [ formError, setFormError ] = useState('');\r\n    // REF\r\n    const blockRef = useRef(null)\r\n\r\n    // RESET SCROLL POS\r\n    const executeScroll = () => window.scrollTo(0, blockRef.current.offsetTop);  \r\n    // EFFECT ON FIRST RENDER\r\n    useEffect(() => {\r\n        const fetchAllStudents = () => {\r\n            const reqConfig = {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    \"Access-Control-Allow-Origin\": \"*\",\r\n                    withCredentials: true,\r\n                    credentials: 'include'\r\n                },   \r\n            }\r\n\r\n             // INIT REQ\r\n             dispatch(requestStudents());\r\n\r\n             axios.get('/api/v1/users/', reqConfig).then((response) => {\r\n                const { students } = response.data;\r\n                dispatch(receiveStudents(students));\r\n                setFormError('');\r\n            }).catch(err => {\r\n                const message = err.response.data.message ? err.response.data.message : \"Please type a querry or select something from the inputs below.\";\r\n                setFormError(message);\r\n                dispatch(studentsError(message));\r\n            });\r\n        }\r\n\r\n        fetchAllStudents();\r\n    }, [dispatch]);\r\n\r\n    const onSubmit = async (values) => {\r\n\r\n        executeScroll();\r\n\r\n        const reqConfig = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                \"Access-Control-Allow-Origin\": \"*\",\r\n                withCredentials: true,\r\n                credentials: 'include'\r\n            },   \r\n        }\r\n\r\n        let reqUrl = null;\r\n        if(values.university && values.searchQuerry) {\r\n            reqUrl = `/api/v1/search-users?${values.university ? `university=${values.university}` : ''}&${values.searchQuerry ? `searchQuerry=${values.searchQuerry}` : ''}`;\r\n        } else if(values.university && (!values.searchQuerry || values.searchQuerry === '')) {\r\n            reqUrl = `/api/v1/search-users?university=${values.university}`;\r\n        } else if (values.searchQuerry && (!values.university || values.university === '')) {\r\n            reqUrl = `/api/v1/search-users?searchQuerry=${values.searchQuerry}`;\r\n        } else if((!values.university || values.university === '') && (!values.searchQuerry || values.searchQuerry === '')) {\r\n            reqUrl = '/api/v1/users/'\r\n        }\r\n\r\n        // INIT REQ\r\n        dispatch(requestStudents());\r\n\r\n        axios.get(reqUrl, reqConfig).then((response) => {\r\n            const { students } = response.data;\r\n            dispatch(receiveStudents(students));\r\n            setFormError('');\r\n            if( students.rows && students.rows.length === 0 ) {\r\n                dispatch(studentsError('Nu au fost gasiti studenti pe baza acestor criterii.'));\r\n                setFormError('Nu au fost gasiti studenti pe baza acestor criterii.');\r\n            } else if (!students.length === 0 || !students) {\r\n                dispatch(studentsError('Nu au fost gasiti studenti pe baza acestor criterii.'));\r\n                setFormError('Nu au fost gasiti studenti pe baza acestor criterii.');\r\n            }\r\n        }).catch(err => {\r\n            let message;\r\n            err.response.data.message ? message = err.response.data.message : message = \"Please type a querry or select something from the inputs below.\"\r\n            setFormError(message);\r\n            dispatch(studentsError(message));\r\n        });\r\n    }\r\n\r\n    // FORM HANDLER\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            university: '',\r\n            searchQuerry: '',\r\n        },\r\n        validateOnBlur: true,\r\n        enableReinitialize: true,\r\n        onSubmit,\r\n        validationSchema: adminSearchSchema\r\n    });\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"dashboard-form-block\" ref={blockRef}>\r\n                <div className=\"dashboard-form-block-heading-wrapper\">\r\n                    <h3 className=\"dashboard-form-title heading-three\">Cauta in baza de date.</h3>    \r\n                    {formError ? <GeneralErrorMessage>{formError}</GeneralErrorMessage> : null }    \r\n                </div>\r\n                <form className=\"dashboard-admin-search-form\" method=\"POST\" onSubmit={ formik.handleSubmit }>\r\n                    <div className=\"form-block full-width\">\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"searchQuerry\" className=\"form-group-label label\">Adresa de e-email, numele sau prenumele studentului*</label>\r\n                            <input \r\n                                type=\"text\" \r\n                                id=\"searchQuerry\" \r\n                                className=\"form-group-input\"\r\n                                name=\"searchQuerry\"\r\n                                value={formik.values.searchQuerry}\r\n                                onChange={formik.handleChange}\r\n                            />\r\n                            {formik.errors.searchQuerry && <ErrorMessageEl>{formik.errors.searchQuerry}</ErrorMessageEl>}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-block full-width\">\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"university\" className=\"form-group-label label\">Universitatea</label>\r\n                            <select \r\n                                id=\"university\" \r\n                                className=\"form-group-input form-group-select\"\r\n                                name=\"university\"\r\n                                value={formik.values.university}\r\n                                onChange={formik.handleChange}\r\n                            >\r\n                                <option value=\"\" label=\"Selectati universitatea\" />\r\n                                <option value=\"Facultatea de Ştiinţa şi Ingineria Materialelor\" label=\"Facultatea de Ştiinţa şi Ingineria Materialelor\" />\r\n                                <option value=\"Facultatea de Mecanică Iaşi\" label=\"Facultatea de Mecanică Iaşi\" />\r\n                                <option value=\"Facultatea de Inginerie Electrică, Energetică şi Informatică Aplicată\" label=\"Facultatea de Inginerie Electrică, Energetică şi Informatică Aplicată\" />\r\n                                <option value=\"Facultatea de Inginerie Chimică și Protecția Mediului „Cristofor Simionescu”\" label=\"Facultatea de Inginerie Chimică și Protecția Mediului „Cristofor Simionescu”\" />\r\n                                <option value=\"Facultatea de Hidrotehnică, Geodezie şi Ingineria Mediului\" label=\"Facultatea de Hidrotehnică, Geodezie şi Ingineria Mediului\" />\r\n                                <option value=\"Facultatea de Electronică, Telecomunicaţii şi Tehnologia Informaţiei\" label=\"Facultatea de Electronică, Telecomunicaţii şi Tehnologia Informaţiei\" />\r\n                                <option value=\"Facultatea de Design Industrial și Managementul Afacerilor\" label=\"Facultatea de Design Industrial și Managementul Afacerilor\" />\r\n                                <option value=\"Facultatea de Construcţii şi Instalaţii\" label=\"Facultatea de Construcţii şi Instalaţii\" />\r\n                                <option value=\"Facultatea de Automatică și Calculatoare\" label=\"Facultatea de Automatică și Calculatoare\" />\r\n                                <option value=\"Facultatea de Arhitectură „G.M. Cantacuzino”\" label=\"Facultatea de Arhitectură „G.M. Cantacuzino”\" />\r\n                                <option value=\"Facultatea Construcţii de Maşini și Management Industrial\" label=\"Facultatea Construcţii de Maşini și Management Industrial\" />\r\n                            </select>\r\n                            {formik.errors.university && <ErrorMessageEl>{formik.errors.university}</ErrorMessageEl>}       \r\n                        </div>\r\n                    </div>  \r\n                    <Button type=\"submit\" textLabel=\"Cauta\" />\r\n                </form>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AdminDashboardSearch;\r\n","export default __webpack_public_path__ + \"static/media/delete-illustration.ecb8dbc3.svg\";","import React, { useEffect } from 'react';\r\nimport deleteIllustation from '../../../assets/images/delete-illustration.svg';\r\nimport './DeleteModal.scss';\r\n\r\nfunction DeleteModal({ handleDelete, toggleModal, toggled }) {\r\n\r\n    useEffect(() => {\r\n        toggled ? document.body.style.overflow = 'hidden' : document.body.style.overflowY = 'scroll';\r\n        return () => {\r\n            document.body.style.overflowY = 'scroll';\r\n        }\r\n    }, [toggled]);\r\n\r\n    return (\r\n        <div className={toggled ? \"modal-wrapper open\" : \"modal-wrapper\"}>\r\n            <div className=\"modal-box\">\r\n                <div className=\"modal-box-inner\">\r\n                    <h3 className=\"heading-three\">Sunteti sigur?</h3>\r\n                    <p className=\"paragraph\">Aceasta actiune nu poate fi revocata!</p>\r\n                    <div className=\"delete-illustration\">\r\n                        <img src={deleteIllustation} alt=\"\" className=\"background-image\" />\r\n                    </div>\r\n                    <div className=\"modal-actions\">\r\n                        <button type=\"button\" className=\"modal-action-button\" onClick={handleDelete}>\r\n                            <span className=\"label\">Confirmă</span>\r\n                        </button>\r\n                        <button type=\"button\" className=\"modal-action-button\" onClick={toggleModal}>\r\n                            <span className=\"label\">Intoarce-te</span>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DeleteModal;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport ReactPaginate from 'react-paginate';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { IconContext } from 'react-icons';\r\nimport { FaRegEdit } from \"react-icons/fa\";\r\nimport { BsTrash } from \"react-icons/bs\";\r\nimport DeleteModal from '../../SharedComponents/DeleteModal/DeleteModal';\r\nimport GeneralErrorMessage from '../../SharedComponents/GeneralErrorMessage/GeneralErrorMessage';\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { \r\n    requestDeleteStudents,\r\n    receiveDeleteStudents, \r\n    studentsDeleteError,\r\n    requestSelectedUser,\r\n    receiveSelectedUser,\r\n    selectedUserError\r\n} from '../../../redux/adminSlice';\r\nimport axios from 'axios';\r\nimport './AdminDashboardPagination.scss';\r\nfunction AdminDashboardPagination({ studentsData }) {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    // STATE\r\n    const [ pageNumber, setPageNumber ] = useState(0);\r\n    const [ modalOpen, setModalOpen ] = useState(false);\r\n    const [ studentId, setStudentId ] = useState(null);\r\n    const [ error, setError ] = useState('');\r\n    // REF\r\n    const blockRef = useRef(null);\r\n\r\n    const tuiasiLogo = require(`../../../assets/images/Universities/embleme-tuiasi-rr-1-300x189.png`).default\r\n\r\n    // RESET SCROLL POS\r\n    const executeScroll = () => window.scrollTo(0, blockRef.current.offsetTop);  \r\n\r\n    // HANDLE DELETE STUDENT\r\n    const handleDelete = () => {\r\n        executeScroll()\r\n\r\n        const reqConfig = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                \"Access-Control-Allow-Origin\": \"*\",\r\n                withCredentials: true,\r\n                credentials: 'include'\r\n            },   \r\n        }\r\n\r\n        dispatch(requestDeleteStudents());\r\n\r\n        axios.delete(`/api/v1/users/${studentId}`, reqConfig).then((response) => {\r\n            setModalOpen(false);\r\n            setStudentId(null);\r\n            dispatch(receiveDeleteStudents(studentId));\r\n        }).catch(err => {\r\n            setModalOpen(false);\r\n            setStudentId(null);\r\n            setError('Student can not be deleted, please try again later');\r\n            dispatch(studentsDeleteError('Student can not be deleted, please try again later'));\r\n        });\r\n    }\r\n\r\n    // HANDLE DISPATCH SELECTED STUDENT\r\n    const dispatchSelectedStudent = (id) => {\r\n        const studentId = id;\r\n\r\n        const reqConfig = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                \"Access-Control-Allow-Origin\": \"*\",\r\n                withCredentials: true,\r\n                credentials: 'include'\r\n            },   \r\n        }\r\n\r\n        dispatch(requestSelectedUser());\r\n\r\n        axios.get(`/api/v1/users/${studentId}`, reqConfig).then((response) => {\r\n            const { user } = response.data;\r\n            dispatch(receiveSelectedUser(user));\r\n            history.push(`/admin/${user.uuid}`);\r\n        }).catch(err => {\r\n            setError('Student can not be selected, please try again later');\r\n            dispatch(selectedUserError('Student can not be selected, please try again later'));\r\n        });\r\n    }\r\n\r\n    const toggleModal = (id) => {\r\n        if(modalOpen === false) {\r\n            setModalOpen(true);\r\n            setStudentId(id);\r\n        } else if (modalOpen === true) {\r\n            setModalOpen(false);\r\n            setStudentId(null);\r\n        }\r\n    }\r\n\r\n    // RESET SCROLL POS ON PAGINATION\r\n    useEffect(() => {\r\n        executeScroll();\r\n    }, [pageNumber])\r\n\r\n    const students = studentsData;\r\n    const studentsPerPage = 10;\r\n    const pagesVisited = pageNumber * studentsPerPage;\r\n\r\n    const pageCount = Math.ceil(students.length / studentsPerPage);\r\n    const changePage = ({ selected }) => {\r\n        setPageNumber(selected);\r\n    };\r\n\r\n    const displayUsers = students.slice(pagesVisited, pagesVisited + studentsPerPage).map((student, index) => { \r\n        let status = '';\r\n        if(student.Enrollment === null || student.Enrollment === undefined) {\r\n            status = 'Autentificat'\r\n        } else if(student.Enrollment && student.hallId === null) {\r\n            status = 'Inrolat';\r\n        } else if (student.Enrollment && student.hallId) {\r\n            status = 'Cazat';\r\n        }\r\n\r\n        return (\r\n            <div className=\"student-block\" key={`student-${student.uuid}`}>\r\n                <div className='student-block-primary-color' />\r\n                <div className=\"student-block-uni-logo\">\r\n                    <img \r\n                        src={tuiasiLogo} \r\n                        alt=\"Student Tuiasi\"\r\n                        className=\"background-image\" />\r\n                </div>\r\n                <div className=\"student-block-label-wrapper\">\r\n                    <span className=\"label\">Prenume</span>\r\n                    <span className=\"label-medium\">{student.first_name}</span>\r\n                </div>\r\n                <div className=\"student-block-label-wrapper\">\r\n                    <span className=\"label\">Nume</span>\r\n                    <span className=\"label-medium\">{student.last_name}</span>\r\n                </div>\r\n                <div className=\"student-block-label-wrapper\">\r\n                    <span className=\"label\">Status</span>\r\n                    <span className=\"label-medium\">{status}</span>\r\n                </div>\r\n                <div className=\"student-block-actions\">\r\n                    <button type=\"button\" className=\"button-action\" onClick={() => dispatchSelectedStudent(student.uuid)}>\r\n                        <IconContext.Provider value={{size: '24px', color: '#fafafa'}}>\r\n                            <FaRegEdit />\r\n                        </IconContext.Provider>\r\n                    </button>\r\n                    <button type=\"button\" className=\"button-action\" onClick={() => toggleModal(student.uuid)}>\r\n                        <IconContext.Provider value={{size: '24px', color: '#fafafa'}} >\r\n                            <BsTrash  className=\"button-action-icon\"/>\r\n                        </IconContext.Provider>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        )\r\n    });\r\n\r\n\r\n    return (\r\n        <>\r\n            <DeleteModal toggled={modalOpen} toggleModal={toggleModal} handleDelete={handleDelete}/>\r\n            { error ? <GeneralErrorMessage>{error}</GeneralErrorMessage> : null}\r\n            <div className=\"pagination-content-blocks\" ref={blockRef}>\r\n                {displayUsers}\r\n            </div>\r\n            <ReactPaginate\r\n                previousLabel={\"Previous\"}\r\n                nextLabel={\"Next\"}\r\n                pageCount={pageCount}\r\n                onPageChange={changePage}\r\n                containerClassName={\"pagination-buttons-wrapper\"}\r\n                previousLinkClassName={\"previous-button\"}\r\n                nextLinkClassName={\"next-button\"}\r\n                disabledClassName={\"pagination-disabled\"}\r\n                activeClassName={\"pagination-active\"}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default AdminDashboardPagination;\r\n","import React, { useEffect } from 'react';\r\nimport AdminDashboardNav from '../AdminDashboardNav/AdminDashboardNav';\r\nimport AdminDashboardSearch from '../AdminDashboardSearch/AdminDashboardSearch';\r\nimport AdminDashboardPagination from '../AdminDashboardPagination/AdminDashboardPagination';\r\n\r\nimport { useSelector } from 'react-redux';\r\nimport { adminSelector } from '../../../redux/adminSlice';\r\n\r\nimport './AdminDashboardMain.scss'\r\n\r\nfunction AdminDashboardMain() {\r\n\r\n    // SLICE OF STATE\r\n    const adminState = useSelector(adminSelector);\r\n    // RESET SCROLL POS\r\n    const executeScroll = () => window.scrollTo(0, 0); \r\n    \r\n    useEffect(() => {\r\n        executeScroll();\r\n    }, [])\r\n\r\n    return (\r\n        <section className=\"admin-dashboard-main\">\r\n            <div className=\"admin-dashboard-main-inner\">\r\n                <AdminDashboardNav />\r\n                <AdminDashboardSearch />\r\n                { Object.keys(adminState.students).length !== 0 && <AdminDashboardPagination studentsData={adminState.students} /> }\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default AdminDashboardMain;\r\n","import React from 'react';\r\nimport InitialTransition from '../utils/InitialTransition/InitialTransition';\r\n\r\n// COMPONENTS\r\nimport Header from '../components/LayoutComponents/Header/Header';\r\nimport AuthBanner from '../components/SharedComponents/AuthBanner/AuthBanner';\r\nimport AdminDashboardMain from '../components/AdminDashboard/AdminDashboardMain/AdminDashboardMain';\r\nimport StatsSection from '../components/SharedComponents/StatsSection/StatsSection';\r\nimport Footer from '../components/LayoutComponents/Footer/Footer';\r\n\r\n// DATA\r\nconst bannerData = {\r\n    isLink: null,\r\n    subtitle: \"Informatii generale\"\r\n}\r\n\r\nfunction AdminDashboard() {\r\n    return (\r\n        <>\r\n            <InitialTransition />\r\n            <Header />\r\n            <main className=\"page-content\">\r\n                <AuthBanner sectionData={ bannerData } title=\"Panoul administratorului\"/>    \r\n                <AdminDashboardMain />\r\n                <StatsSection />\r\n            </main>\r\n            <Footer /> \r\n        </>\r\n    )\r\n}\r\n\r\nexport default AdminDashboard;\r\n"],"sourceRoot":""}