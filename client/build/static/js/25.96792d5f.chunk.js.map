{"version":3,"sources":["components/StudentDashboard/StudentDashboardNav/StudentDashboardNav.js","components/StudentDashboard/StudentDashboardCreateEnroll/StudentDashboardCreateEnroll.js","components/StudentDashboard/StudentDashboardUpdateEnroll/StudentDashboardUpdateEnroll.js","pages/StudentDashboardEnrollment.js"],"names":["StudentDashboardNav","userState","useSelector","userSelector","className","to","user","first_name","last_name","activeClassName","StudentDashboardCreateEnroll","dispatch","useDispatch","history","useHistory","useState","formError","setFormError","typeOfStudy","setTypeOfStudy","blockRef","useRef","formik","useFormik","initialValues","university","year_of_study","type_of_study","grade","financial_type","nationality","student_gender","validateOnBlur","onSubmit","values","resetForm","window","scrollTo","current","offsetTop","requestEnroll","axios","post","headers","withCredentials","credentials","then","response","enrollment","data","receiveEnroll","push","catch","err","message","errors","msg","enrollError","validationSchema","enrollSchema","ref","GeneralErrorMessage","method","handleSubmit","htmlFor","id","name","value","onChange","handleChange","label","ErrorMessage","onBlur","e","target","type","min","max","step","ButtonPrimary","textLabel","StudentDashboardUpdateEnroll","sectionData","requestUpdateEnroll","patch","uuid","status","receiveUpdateEnroll","updateEnrollError","onClick","requestDeleteEnroll","delete","receiveDeleteEnroll","deleteEnrollError","bannerData","isLink","subtitle","StudentDashboardEnrollment","userEnrollSlice","userEnrollSelector","currentEnroll","setCurrentEnroll","isLoading","setIsLoading","useEffect","get","InitialTransition","Header","AuthBanner","isEnrolled","StatsSection","Footer"],"mappings":"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","file":"static/js/25.96792d5f.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n// REDUX\r\nimport { useSelector } from 'react-redux';\r\nimport { userSelector } from '../../../redux/userSlice';\r\n\r\nimport './StudentDashboardNav.scss';\r\n\r\nfunction StudentDashboardNav() {\r\n\r\n    const userState = useSelector(userSelector);\r\n\r\n    return (\r\n        <ul className=\"dashboard-main-nav\">\r\n            <li className=\"dashboard-nav-list-item\">\r\n                <NavLink \r\n                    to={`/${userState.user.first_name}.${userState.user.last_name}/dashboard`} \r\n                    activeClassName=\"selected\" \r\n                    className=\"dashboard-nav-link\"\r\n                >\r\n                    <span className=\"label-medium\">Dashboard</span>\r\n                </NavLink>\r\n            </li>\r\n            <li className=\"dashboard-nav-list-item\">\r\n                <NavLink \r\n                    to={`/${userState.user.first_name}.${userState.user.last_name}/enrollment`} \r\n                    activeClassName=\"selected\" \r\n                    className=\"dashboard-nav-link\"\r\n                >\r\n                    <span className=\"label-medium\">Enrollment</span>\r\n                </NavLink>\r\n            </li>\r\n            <li className=\"dashboard-nav-list-item\">\r\n                <NavLink \r\n                    to={`/${userState.user.first_name}.${userState.user.last_name}/information`} \r\n                    activeClassName=\"selected\" \r\n                    className=\"dashboard-nav-link\"\r\n                >\r\n                    <span className=\"label-medium\">Information</span>\r\n                </NavLink>\r\n            </li>\r\n            <li className=\"dashboard-nav-list-item\">\r\n                <NavLink \r\n                    to={`/${userState.user.first_name}.${userState.user.last_name}/kins`} \r\n                    activeClassName=\"selected\" \r\n                    className=\"dashboard-nav-link\"\r\n                >\r\n                    <span className=\"label-medium\">Student Kins</span>\r\n                </NavLink>\r\n            </li>\r\n            <li className=\"dashboard-nav-list-item\">\r\n                <NavLink \r\n                    to={`/${userState.user.first_name}.${userState.user.last_name}/update-details`} \r\n                    activeClassName=\"selected\" \r\n                    className=\"dashboard-nav-link\"\r\n                >\r\n                    <span className=\"label-medium\">Update account</span>\r\n                </NavLink>\r\n            </li>\r\n            <li className=\"dashboard-nav-list-item\">\r\n                <NavLink \r\n                    to={`/${userState.user.first_name}.${userState.user.last_name}/update-password`} \r\n                    activeClassName=\"selected\" \r\n                    className=\"dashboard-nav-link\"\r\n                >\r\n                    <span className=\"label-medium\">Update password</span>\r\n                </NavLink>\r\n            </li>\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default StudentDashboardNav;\r\n","import React, { useState, useRef } from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport StudentDashboardNav from '../StudentDashboardNav/StudentDashboardNav';\r\nimport ErrorMessageEl from '../../SharedComponents/FormErrorMessage/ErrorMessage';\r\nimport GeneralErrorMessage from '../../SharedComponents/GeneralErrorMessage/GeneralErrorMessage';\r\nimport ButtonPrimary from '../../SharedComponents/Button/ButtonPrimary';\r\nimport axios from 'axios';\r\n\r\nimport { useFormik } from 'formik';\r\nimport { enrollSchema } from '../../../validation/UserSchema';\r\n\r\n// REDUX\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { requestEnroll, receiveEnroll, enrollError } from '../../../redux/userEnrollSlice';\r\nimport { userSelector } from '../../../redux/userSlice';\r\nimport './StudentDashboardCreateEnroll.scss';\r\n\r\nfunction StudentDashboardCreateEnroll() {\r\n\r\n    // REDUX\r\n    const dispatch = useDispatch();\r\n    const userState = useSelector(userSelector);\r\n    const history = useHistory();\r\n    // STATE\r\n    const [ formError, setFormError ] = useState('');\r\n    const [ typeOfStudy, setTypeOfStudy ] = useState('');\r\n    // REF\r\n    const blockRef = useRef(null)\r\n\r\n    // RESET SCROLL POS\r\n    const executeScroll = () => window.scrollTo(0, blockRef.current.offsetTop);  \r\n\r\n    // HANDLE FIELD ON BLUR\r\n    const handleBlur = (e) => setTypeOfStudy(e.target.value);\r\n\r\n    // CREATE ENROLLMENT\r\n    const onSubmit = (values, { resetForm }) => {\r\n        // RESET SCROLL POSITION\r\n        executeScroll();\r\n\r\n        const reqConfig = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                \"Access-Control-Allow-Origin\": \"*\",\r\n                withCredentials: true,\r\n                credentials: 'include'\r\n            }, \r\n        }\r\n\r\n        dispatch(requestEnroll());\r\n\r\n        ///api/v1/users/enrollment\r\n\r\n        axios.post(`https://campus-tudor-vladimirescu.herokuapp.com/api/v1/users/enrollment`,  values, reqConfig).then((response) => {\r\n            const { enrollment } = response.data;\r\n            dispatch(receiveEnroll(enrollment));\r\n            resetForm();\r\n            setFormError('');\r\n            history.push(`/${userState.user.first_name}.${userState.user.last_name}/enrollment/success`);\r\n        }).catch(err => {\r\n            const message = err.response.data.errors ? err.response.data.errors[0].msg : err.response.data.message;\r\n            dispatch(enrollError(message));\r\n            setFormError(message);\r\n        });\r\n    };\r\n\r\n    // FORM HANDLER\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            university: '',\r\n            year_of_study: '',\r\n            type_of_study: '',\r\n            grade: '',\r\n            financial_type: '',\r\n            nationality: '',\r\n            student_gender: '',\r\n        },\r\n        validateOnBlur: true,\r\n        onSubmit,\r\n        validationSchema: enrollSchema\r\n    });\r\n\r\n    return (\r\n        <section className=\"dashboard-create-enroll\">\r\n            <div className=\"dashboard-create-enroll-inner\">\r\n                <StudentDashboardNav />\r\n                <div className=\"dashboard-form-block\" ref={blockRef}>\r\n                    <div className=\"dashboard-form-block-heading-wrapper\">\r\n                        <h3 className=\"dashboard-form-title heading-three\">Adauga informatiile personale</h3>    \r\n                        {formError ? <GeneralErrorMessage>{formError}</GeneralErrorMessage> : null }    \r\n                    </div>\r\n                    <form className=\"dashboard-create-enroll-form\" method=\"POST\" onSubmit={ formik.handleSubmit }>\r\n                        <div className=\"form-block full-width\">\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"university\" className=\"form-group-label label\">Universitatea dvs.*</label>\r\n                                <select \r\n                                    id=\"university\" \r\n                                    className=\"form-group-input form-group-select\"\r\n                                    name=\"university\"\r\n                                    value={formik.values.university}\r\n                                    onChange={formik.handleChange}\r\n                                >\r\n                                    <option value=\"\" label=\"Selectati universitatea\" />\r\n                                    <option value=\"Facultatea de Ştiinţa şi Ingineria Materialelor\" label=\"Facultatea de Ştiinţa şi Ingineria Materialelor\" />\r\n                                    <option value=\"Facultatea de Mecanică Iaşi\" label=\"Facultatea de Mecanică Iaşi\" />\r\n                                    <option value=\"Facultatea de Inginerie Electrică, Energetică şi Informatică Aplicată\" label=\"Facultatea de Inginerie Electrică, Energetică şi Informatică Aplicată\" />\r\n                                    <option value=\"Facultatea de Inginerie Chimică și Protecția Mediului „Cristofor Simionescu”\" label=\"Facultatea de Inginerie Chimică și Protecția Mediului „Cristofor Simionescu”\" />\r\n                                    <option value=\"Facultatea de Hidrotehnică, Geodezie şi Ingineria Mediului\" label=\"Facultatea de Hidrotehnică, Geodezie şi Ingineria Mediului\" />\r\n                                    <option value=\"Facultatea de Electronică, Telecomunicaţii şi Tehnologia Informaţiei\" label=\"Facultatea de Electronică, Telecomunicaţii şi Tehnologia Informaţiei\" />\r\n                                    <option value=\"Facultatea de Design Industrial și Managementul Afacerilor\" label=\"Facultatea de Design Industrial și Managementul Afacerilor\" />\r\n                                    <option value=\"Facultatea de Construcţii şi Instalaţii\" label=\"Facultatea de Construcţii şi Instalaţii\" />\r\n                                    <option value=\"Facultatea de Automatică și Calculatoare\" label=\"Facultatea de Automatică și Calculatoare\" />\r\n                                    <option value=\"Facultatea de Arhitectură „G.M. Cantacuzino”\" label=\"Facultatea de Arhitectură „G.M. Cantacuzino”\" />\r\n                                    <option value=\"Facultatea Construcţii de Maşini și Management Industrial\" label=\"Facultatea Construcţii de Maşini și Management Industrial\" />\r\n                                </select>\r\n                                {formik.errors.university && <ErrorMessageEl>{formik.errors.university}</ErrorMessageEl>}       \r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-block\">\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"type_of_study\" className=\"form-group-label label\">Tipul de studiu.*</label>\r\n                                <select \r\n                                    id=\"type_of_study\" \r\n                                    className=\"form-group-input form-group-select\"\r\n                                    name=\"type_of_study\"\r\n                                    value={formik.values.type_of_study}\r\n                                    onChange={formik.handleChange}\r\n                                    onBlur={handleBlur}\r\n                                >\r\n                                    <option value=\"\" label=\"Selectati tipul de studiu\" />\r\n                                    <option value=\"Licenta\" label=\"Licenta\" />\r\n                                    <option value=\"Master\" label=\"Master\" />\r\n                                    <option value=\"Doctorat\" label=\"Doctorat\" />\r\n                                </select>\r\n                                {formik.errors.type_of_study && <ErrorMessageEl>{formik.errors.type_of_study}</ErrorMessageEl>}\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"year_of_study\" className=\"form-group-label label\">Anul de studiu.*</label>\r\n                                <select \r\n                                    id=\"year_of_study\" \r\n                                    className=\"form-group-input form-group-select\"\r\n                                    name=\"year_of_study\"\r\n                                    value={formik.values.year_of_study}\r\n                                    onChange={formik.handleChange}\r\n                                >\r\n                                    <option value=\"\" label=\"Selectati anul de studiu\" />\r\n                                    { (typeOfStudy === 'Licenta' || typeOfStudy === '')&& (\r\n                                        <>\r\n                                            <option value=\"1\" label=\"1\" />\r\n                                            <option value=\"2\" label=\"2\" />\r\n                                            <option value=\"3\" label=\"3\" />\r\n                                            <option value=\"4\" label=\"4\" />\r\n                                            <option value=\"5\" label=\"5\" />\r\n                                            <option value=\"6\" label=\"6\" />\r\n                                        </>\r\n                                    )}\r\n\r\n                                    { (typeOfStudy === 'Master' || typeOfStudy === 'Doctorat') && (\r\n                                        <>\r\n                                            <option value=\"1\" label=\"1\" />\r\n                                            <option value=\"2\" label=\"2\" />\r\n                                        </>\r\n                                    )}\r\n                                </select>\r\n                                {formik.errors.year_of_study && <ErrorMessageEl>{formik.errors.year_of_study}</ErrorMessageEl>}\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"grade\" className=\"form-group-label label\">Media generala a anului trecut.*</label>\r\n                                <input \r\n                                    type=\"number\" \r\n                                    min=\"0\"\r\n                                    max=\"10\"\r\n                                    step=\"0.01\"\r\n                                    id=\"grade\" \r\n                                    className=\"form-group-input\"\r\n                                    name=\"grade\"\r\n                                    value={formik.values.grade}\r\n                                    onChange={formik.handleChange}\r\n                                />\r\n                                {formik.errors.grade && <ErrorMessageEl>{formik.errors.grade}</ErrorMessageEl>}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-block\">\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"financial_type\" className=\"form-group-label label\">Tipul de studiu: buget / taxa.*</label>\r\n                                <select \r\n                                    id=\"financial_type\" \r\n                                    className=\"form-group-input form-group-select\"\r\n                                    name=\"financial_type\"\r\n                                    value={formik.values.financial_type}\r\n                                    onChange={formik.handleChange}\r\n                                >\r\n                                    <option value=\"\" label=\"Selectati tipul de studiu: buget / taxa\" />\r\n                                    <option value=\"Buget\" label=\"Buget\" />\r\n                                    <option value=\"Taxa\" label=\"Taxa\" />\r\n                                </select>\r\n                                {formik.errors.financial_type && <ErrorMessageEl>{formik.errors.financial_type}</ErrorMessageEl>}\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"nationality\" className=\"form-group-label label\">Nationalitatea*</label>\r\n                                <input \r\n                                    type=\"text\" \r\n                                    id=\"nationality\" \r\n                                    className=\"form-group-input\"\r\n                                    name=\"nationality\"\r\n                                    value={formik.values.nationality}\r\n                                    onChange={formik.handleChange}\r\n                                />\r\n                                {formik.errors.nationality && <ErrorMessageEl>{formik.errors.nationality}</ErrorMessageEl>}\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"student_gender\" className=\"form-group-label label\">Genul dvs.*</label>\r\n                                <select \r\n                                    id=\"student_gender\" \r\n                                    className=\"form-group-input form-group-select\"\r\n                                    name=\"student_gender\"\r\n                                    value={formik.values.student_gender}\r\n                                    onChange={formik.handleChange}\r\n                                >\r\n                                    <option value=\"\" label=\"Selectati genul dvs.\" />\r\n                                    <option value=\"Feminin\" label=\"Feminin\" />\r\n                                    <option value=\"Masculin\" label=\"Masculin\" />\r\n                                </select>\r\n                                {formik.errors.student_gender && <ErrorMessageEl>{formik.errors.student_gender}</ErrorMessageEl>}\r\n                            </div>          \r\n                        </div>\r\n                        <ButtonPrimary type=\"submit\" textLabel=\"Inroleaza-te\" />\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default StudentDashboardCreateEnroll;\r\n\r\n","import React, { useState, useRef } from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport StudentDashboardNav from '../StudentDashboardNav/StudentDashboardNav';\r\nimport ErrorMessageEl from '../../SharedComponents/FormErrorMessage/ErrorMessage';\r\nimport GeneralErrorMessage from '../../SharedComponents/GeneralErrorMessage/GeneralErrorMessage';\r\nimport ButtonPrimary from '../../SharedComponents/Button/ButtonPrimary';\r\nimport axios from 'axios';\r\n\r\nimport { useFormik } from 'formik';\r\nimport { enrollSchema } from '../../../validation/UserSchema';\r\n\r\n// REDUX\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { \r\n    requestUpdateEnroll,\r\n    receiveUpdateEnroll,\r\n    updateEnrollError,\r\n    requestDeleteEnroll,\r\n    receiveDeleteEnroll,\r\n    deleteEnrollError \r\n} from '../../../redux/userEnrollSlice';\r\nimport { userSelector } from '../../../redux/userSlice';\r\n\r\nimport './StudentDashboardUpdateEnroll.scss';\r\n\r\nfunction StudentDashboardUpdateEnroll({ sectionData }) {\r\n\r\n    // REDUX\r\n    const dispatch = useDispatch();\r\n    const userState = useSelector(userSelector);\r\n    const history = useHistory();\r\n    // STATE\r\n    const [ formError, setFormError ] = useState('');\r\n    const [ typeOfStudy, setTypeOfStudy ] = useState('');\r\n    // REF\r\n    const blockRef = useRef(null)\r\n\r\n    // RESET SCROLL POS\r\n    const executeScroll = () => window.scrollTo(0, blockRef.current.offsetTop);  \r\n\r\n    // HANDLE FIELD ON BLUR\r\n    const handleBlur = (e) => setTypeOfStudy(e.target.value);\r\n\r\n    // UPDATE ENROLLMENT\r\n    const onSubmit = (values, { resetForm }) => {\r\n        // RESET SCROLL POSITION\r\n        executeScroll();\r\n\r\n        const reqConfig = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                \"Access-Control-Allow-Origin\": \"*\",\r\n                withCredentials: true,\r\n                credentials: 'include'\r\n            }, \r\n        }\r\n\r\n        dispatch(requestUpdateEnroll());\r\n\r\n        //`/api/v1/users/enrollment/${sectionData.uuid}`\r\n\r\n        axios.patch(`https://campus-tudor-vladimirescu.herokuapp.com/api/v1/users/enrollment/${sectionData.uuid}`,  values, reqConfig).then((response) => {\r\n            if(response.status === 200 || response.status === 201) {\r\n                const { enrollment } = response.data;\r\n                dispatch(receiveUpdateEnroll(enrollment));\r\n                resetForm();\r\n                setFormError('');\r\n                history.push(`/${userState.user.first_name}.${userState.user.last_name}/enrollment/success`);\r\n            } else {\r\n                dispatch(updateEnrollError('There is an error with creating your information, please try again'));\r\n                setFormError('There is an error with creating your information, please try again');\r\n            }\r\n        }).catch(err => {\r\n            const message = err.response.data.errors ? err.response.data.errors[0].msg : err.response.data.message;\r\n            setFormError(message);\r\n            dispatch(updateEnrollError(message));\r\n        });\r\n    };\r\n\r\n    // DELETE ENROLLMENT\r\n    const handleDeleteEnrollment = () => {\r\n        const reqConfig = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                \"Access-Control-Allow-Origin\": \"*\",\r\n                withCredentials: true,\r\n                credentials: 'include'\r\n            }, \r\n        }\r\n\r\n        dispatch(requestDeleteEnroll());\r\n\r\n        ///api/v1/users/enrollment/${sectionData.uuid}\r\n\r\n        axios.delete(`https://campus-tudor-vladimirescu.herokuapp.com/api/v1/users/enrollment/${sectionData.uuid}`, reqConfig).then((response) => {\r\n            if(response.status === 204) {\r\n                dispatch(receiveDeleteEnroll());\r\n                history.push(`/${userState.user.first_name}.${userState.user.last_name}/kins`);\r\n            } else {\r\n                dispatch(deleteEnrollError('There is an error, your enrollment can not be deleted. Please try again'));\r\n                setFormError('There is an error, your enrollment can not be deleted. Please try again');\r\n            }\r\n        }).catch(err => {\r\n            setFormError('There is an error, please try again');\r\n        });\r\n    }\r\n\r\n    // FORM HANDLER\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            university: sectionData.university,\r\n            year_of_study: sectionData.year_of_study,\r\n            type_of_study: sectionData.type_of_study,\r\n            grade: sectionData.grade,\r\n            financial_type: sectionData.financial_type,\r\n            nationality: sectionData.nationality,\r\n            student_gender: sectionData.student_gender,\r\n        },\r\n        validateOnBlur: true,\r\n        onSubmit,\r\n        validationSchema: enrollSchema\r\n    });\r\n\r\n    return (\r\n        <section className=\"dashboard-update-enroll\">\r\n            <div className=\"dashboard-update-enroll-inner\">\r\n                <StudentDashboardNav />\r\n                <div className=\"dashboard-form-block\" ref={blockRef}>\r\n                    <div className=\"dashboard-form-block-heading-wrapper\">\r\n                        <h3 className=\"dashboard-form-title heading-three\">Adauga informatiile personale</h3>    \r\n                        {formError ? <GeneralErrorMessage>{formError}</GeneralErrorMessage> : null }    \r\n                    </div>\r\n                    <form className=\"dashboard-update-enroll-form\" method=\"POST\" onSubmit={ formik.handleSubmit }>\r\n                        <div className=\"form-block full-width\">\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"university\" className=\"form-group-label label\">Universitatea dvs.*</label>\r\n                                <select \r\n                                    id=\"university\" \r\n                                    className=\"form-group-input form-group-select\"\r\n                                    name=\"university\"\r\n                                    value={formik.values.university}\r\n                                    onChange={formik.handleChange}\r\n                                >\r\n                                    <option value=\"\" label=\"Selectati universitatea\" />\r\n                                    <option value=\"Facultatea de Ştiinţa şi Ingineria Materialelor\" label=\"Facultatea de Ştiinţa şi Ingineria Materialelor\" />\r\n                                    <option value=\"Facultatea de Mecanică Iaşi\" label=\"Facultatea de Mecanică Iaşi\" />\r\n                                    <option value=\"Facultatea de Inginerie Electrică, Energetică şi Informatică Aplicată\" label=\"Facultatea de Inginerie Electrică, Energetică şi Informatică Aplicată\" />\r\n                                    <option value=\"Facultatea de Inginerie Chimică și Protecția Mediului „Cristofor Simionescu”\" label=\"Facultatea de Inginerie Chimică și Protecția Mediului „Cristofor Simionescu”\" />\r\n                                    <option value=\"Facultatea de Hidrotehnică, Geodezie şi Ingineria Mediului\" label=\"Facultatea de Hidrotehnică, Geodezie şi Ingineria Mediului\" />\r\n                                    <option value=\"Facultatea de Electronică, Telecomunicaţii şi Tehnologia Informaţiei\" label=\"Facultatea de Electronică, Telecomunicaţii şi Tehnologia Informaţiei\" />\r\n                                    <option value=\"Facultatea de Design Industrial și Managementul Afacerilor\" label=\"Facultatea de Design Industrial și Managementul Afacerilor\" />\r\n                                    <option value=\"Facultatea de Construcţii şi Instalaţii\" label=\"Facultatea de Construcţii şi Instalaţii\" />\r\n                                    <option value=\"Facultatea de Automatică și Calculatoare\" label=\"Facultatea de Automatică și Calculatoare\" />\r\n                                    <option value=\"Facultatea de Arhitectură „G.M. Cantacuzino”\" label=\"Facultatea de Arhitectură „G.M. Cantacuzino”\" />\r\n                                    <option value=\"Facultatea Construcţii de Maşini și Management Industrial\" label=\"Facultatea Construcţii de Maşini și Management Industrial\" />\r\n                                </select>\r\n                                {formik.errors.university && <ErrorMessageEl>{formik.errors.university}</ErrorMessageEl>}       \r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-block\">\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"type_of_study\" className=\"form-group-label label\">Tipul de studiu.*</label>\r\n                                <select \r\n                                    id=\"type_of_study\" \r\n                                    className=\"form-group-input form-group-select\"\r\n                                    name=\"type_of_study\"\r\n                                    value={formik.values.type_of_study}\r\n                                    onChange={formik.handleChange}\r\n                                    onBlur={handleBlur}\r\n                                >\r\n                                    <option value=\"\" label=\"Selectati tipul de studiu\" />\r\n                                    <option value=\"Licenta\" label=\"Licenta\" />\r\n                                    <option value=\"Master\" label=\"Master\" />\r\n                                    <option value=\"Doctorat\" label=\"Doctorat\" />\r\n                                </select>\r\n                                {formik.errors.type_of_study && <ErrorMessageEl>{formik.errors.type_of_study}</ErrorMessageEl>}\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"year_of_study\" className=\"form-group-label label\">Anul de studiu.*</label>\r\n                                <select \r\n                                    id=\"year_of_study\" \r\n                                    className=\"form-group-input form-group-select\"\r\n                                    name=\"year_of_study\"\r\n                                    value={formik.values.year_of_study}\r\n                                    onChange={formik.handleChange}\r\n                                >\r\n                                    <option value=\"\" label=\"Selectati anul de studiu\" />\r\n                                    { (typeOfStudy === 'Licenta' || typeOfStudy === '')&& (\r\n                                        <>\r\n                                            <option value=\"1\" label=\"1\" />\r\n                                            <option value=\"2\" label=\"2\" />\r\n                                            <option value=\"3\" label=\"3\" />\r\n                                            <option value=\"4\" label=\"4\" />\r\n                                            <option value=\"5\" label=\"5\" />\r\n                                            <option value=\"6\" label=\"6\" />\r\n                                        </>\r\n                                    )}\r\n\r\n                                    { (typeOfStudy === 'Master' || typeOfStudy === 'Doctorat') && (\r\n                                        <>\r\n                                            <option value=\"1\" label=\"1\" />\r\n                                            <option value=\"2\" label=\"2\" />\r\n                                        </>\r\n                                    )}\r\n                                </select>\r\n                                {formik.errors.year_of_study && <ErrorMessageEl>{formik.errors.year_of_study}</ErrorMessageEl>}\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"grade\" className=\"form-group-label label\">Media generala a anului trecut.*</label>\r\n                                <input \r\n                                    type=\"number\" \r\n                                    min=\"0\"\r\n                                    max=\"10\"\r\n                                    step=\"0.01\"\r\n                                    id=\"grade\" \r\n                                    className=\"form-group-input\"\r\n                                    name=\"grade\"\r\n                                    value={formik.values.grade}\r\n                                    onChange={formik.handleChange}\r\n                                />\r\n                                {formik.errors.grade && <ErrorMessageEl>{formik.errors.grade}</ErrorMessageEl>}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-block\">\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"financial_type\" className=\"form-group-label label\">Tipul de studiu: buget / taxa.*</label>\r\n                                <select \r\n                                    id=\"financial_type\" \r\n                                    className=\"form-group-input form-group-select\"\r\n                                    name=\"financial_type\"\r\n                                    value={formik.values.financial_type}\r\n                                    onChange={formik.handleChange}\r\n                                >\r\n                                    <option value=\"\" label=\"Selectati tipul de studiu: buget / taxa\" />\r\n                                    <option value=\"Buget\" label=\"Buget\" />\r\n                                    <option value=\"Taxa\" label=\"Taxa\" />\r\n                                </select>\r\n                                {formik.errors.financial_type && <ErrorMessageEl>{formik.errors.financial_type}</ErrorMessageEl>}\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"nationality\" className=\"form-group-label label\">Nationalitatea*</label>\r\n                                <input \r\n                                    type=\"text\" \r\n                                    id=\"nationality\" \r\n                                    className=\"form-group-input\"\r\n                                    name=\"nationality\"\r\n                                    value={formik.values.nationality}\r\n                                    onChange={formik.handleChange}\r\n                                />\r\n                                {formik.errors.nationality && <ErrorMessageEl>{formik.errors.nationality}</ErrorMessageEl>}\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"student_gender\" className=\"form-group-label label\">Genul dvs.*</label>\r\n                                <select \r\n                                    id=\"student_gender\" \r\n                                    className=\"form-group-input form-group-select\"\r\n                                    name=\"student_gender\"\r\n                                    value={formik.values.student_gender}\r\n                                    onChange={formik.handleChange}\r\n                                >\r\n                                    <option value=\"\" label=\"Selectati genul dvs.\" />\r\n                                    <option value=\"Feminin\" label=\"Feminin\" />\r\n                                    <option value=\"Masculin\" label=\"Masculin\" />\r\n                                </select>\r\n                                {formik.errors.student_gender && <ErrorMessageEl>{formik.errors.student_gender}</ErrorMessageEl>}\r\n                            </div>          \r\n                        </div>\r\n                        <ButtonPrimary type=\"submit\" textLabel=\"Actualizeaza inrolarea\" />\r\n                        <ButtonPrimary type=\"button\" onClick={handleDeleteEnrollment} textLabel=\"Sterge inrolarea\" />\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default StudentDashboardUpdateEnroll;\r\n","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios';\r\nimport InitialTransition from '../utils/InitialTransition/InitialTransition';\r\n\r\n// COMPONENTS\r\nimport Header from '../components/LayoutComponents/Header/Header';\r\nimport AuthBanner from '../components/SharedComponents/AuthBanner/AuthBanner';\r\nimport StudentDashboardCreateEnroll from '../components/StudentDashboard/StudentDashboardCreateEnroll/StudentDashboardCreateEnroll';\r\nimport StudentDashboardUpdateEnroll from '../components/StudentDashboard/StudentDashboardUpdateEnroll/StudentDashboardUpdateEnroll';\r\nimport StatsSection from '../components/SharedComponents/StatsSection/StatsSection';\r\nimport Footer from '../components/LayoutComponents/Footer/Footer';\r\n// REDUX\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { requestEnroll, receiveEnroll, enrollError, userEnrollSelector } from '../redux/userEnrollSlice';\r\n\r\n// DATA\r\nconst bannerData = {\r\n    isLink: null,\r\n    subtitle: \"Inrolarea studentilor\"\r\n}\r\n\r\nfunction StudentDashboardEnrollment() {\r\n\r\n    // SLICE OF STATE\r\n    const userEnrollSlice = useSelector(userEnrollSelector);\r\n    const dispatch = useDispatch();\r\n    // STATE\r\n    const [ currentEnroll, setCurrentEnroll ] = useState({});\r\n    const [ isLoading, setIsLoading ] = useState(true);\r\n\r\n    // GET CURRENT ENROLLMENT ON FIRST RENDER\r\n    useEffect(() => {\r\n        const fetchCurrentEnroll = () => {\r\n            const reqConfig = {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    \"Access-Control-Allow-Origin\": \"*\",\r\n                    withCredentials: true,\r\n                    credentials: 'include'\r\n                }, \r\n            }\r\n            \r\n            dispatch(requestEnroll());\r\n\r\n            ///api/v1/users/enrollment\r\n\r\n            axios.get('https://campus-tudor-vladimirescu.herokuapp.com/api/v1/users/enrollment', reqConfig).then((response) => {\r\n                const { enrollment } = response.data;\r\n                dispatch(receiveEnroll(enrollment));\r\n                setCurrentEnroll(enrollment);\r\n                setIsLoading(false);\r\n            }).catch(err => {\r\n                dispatch(enrollError('There is an error with your informations'));\r\n                setIsLoading(false);\r\n            });\r\n        }\r\n\r\n        fetchCurrentEnroll();\r\n    }, [dispatch]);\r\n\r\n    if(isLoading) {\r\n        return <InitialTransition />\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <InitialTransition />\r\n            <Header />\r\n            <main className=\"page-content\">\r\n                <AuthBanner sectionData={ bannerData }/>    \r\n                {\r\n                    userEnrollSlice.isEnrolled ? <StudentDashboardUpdateEnroll sectionData={currentEnroll} /> : <StudentDashboardCreateEnroll />\r\n                }\r\n                <StatsSection />\r\n            </main>\r\n            <Footer /> \r\n        </>\r\n    )\r\n}\r\n\r\nexport default StudentDashboardEnrollment;\r\n"],"sourceRoot":""}