{"version":3,"sources":["components/SharedComponents/AuthBanner/AuthBanner.js","components/SharedComponents/GeneralErrorMessage/GeneralErrorMessage.js","components/AdminDashboard/AdminDashboardNav/AdminDashboardNav.js","validation/AdminSchema.js","components/AdminDashboard/AdminDashboardCreateUser/AdminDashboardCreateUser.js","pages/AdminDashboardCreateAcc.js","components/SharedComponents/Button/ButtonPrimary.js","components/SharedComponents/FormErrorMessage/ErrorMessage.js"],"names":["AuthBanner","sectionData","title","className","subtitle","isLink","to","path","pathLabel","GeneralErrorMessage","children","success","AdminDashboardNav","activeClassName","adminSearchSchema","yup","university","searchQuerry","matches","updateStudentSchema","first_name","required","min","last_name","email","role","createStudentSchema","password","password_confirm","when","is","val","length","then","oneOf","AdminDashboardCreateUser","useState","formError","setFormError","visiblePassword","setVisiblePassword","visibleConfirmPassword","setVisibleConfirmPassword","blockRef","useRef","useEffect","formik","useFormik","initialValues","validateOnBlur","enableReinitialize","onSubmit","values","resetForm","window","scrollTo","current","offsetTop","axios","post","headers","withCredentials","credentials","response","catch","err","message","data","errors","msg","validationSchema","ref","method","handleSubmit","htmlFor","type","id","name","value","onChange","handleChange","ErrorMessage","onClick","prevState","Provider","size","color","ButtonPrimary","textLabel","bannerData","AdminDashboardCreateAcc","InitialTransition","Header","StatsSection","Footer","Button","disabled","ErrorMessageWrapper","styled","div","MessageLabel","p","ErrorMessageEl"],"mappings":"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","file":"static/js/30.1eaacf67.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './AuthBanner.scss';\r\n\r\nfunction AuthBanner({ sectionData, title }) {\r\n    return (\r\n        <section className=\"auth-banner\">\r\n            <div className=\"auth-banner-content\">\r\n                <div className=\"content-heading-wrapper\">\r\n                    <h1 className=\"content-heading-title heading-one\">{title ? title : 'Portalul utilizatorului'}</h1>\r\n                </div>\r\n                <div className=\"content-subtitle-wrapper\">\r\n                    <h3 className=\"content-subtitle heading-three\">{sectionData.subtitle}</h3>\r\n                    {sectionData.isLink && \r\n                        <Link to={sectionData.path} className=\"content-link-wrapper\">\r\n                            <span className=\"content-link-label label-large\">{sectionData.pathLabel}</span>\r\n                        </Link>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default AuthBanner;","import React from 'react';\r\nimport './GeneralErrorMessage.scss';\r\n\r\nfunction GeneralErrorMessage({ children, success }) {\r\n    return (\r\n        <div className=\"general-error\">\r\n            <div className=\"general-error-inner\">\r\n                <span className=\"link-label\">{success ? 'Success:' : 'Error:'}<span className=\"label\">{children}</span></span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GeneralErrorMessage;\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport './AdminDashboardNav.scss';\r\n\r\nfunction AdminDashboardNav() {\r\n\r\n    return (\r\n        <ul className=\"dashboard-admin-nav\">\r\n            <li className=\"dashboard-admin-nav-list-item\">\r\n                <NavLink \r\n                    to='/admin' \r\n                    activeClassName=\"selected\" \r\n                    className=\"dashboard-nav-link\"\r\n                >\r\n                    <span className=\"label-medium\">Dashboard</span>\r\n                </NavLink>\r\n            </li>\r\n            <li className=\"dashboard-admin-nav-list-item\">\r\n                <NavLink \r\n                    to='/admin-blog' \r\n                    activeClassName=\"selected\" \r\n                    className=\"dashboard-nav-link\"\r\n                >\r\n                    <span className=\"label-medium\">Blog</span>\r\n                </NavLink>\r\n            </li>\r\n            <li className=\"dashboard-admin-nav-list-item\">\r\n                <NavLink \r\n                    to='/admin-appoitments' \r\n                    activeClassName=\"selected\" \r\n                    className=\"dashboard-nav-link\"\r\n                >\r\n                    <span className=\"label-medium\">Appoitments</span>\r\n                </NavLink>\r\n            </li>\r\n            <li className=\"dashboard-admin-nav-list-item\">\r\n                <NavLink \r\n                    to='/admin-create' \r\n                    activeClassName=\"selected\" \r\n                    className=\"dashboard-nav-link\"\r\n                >\r\n                    <span className=\"label-medium\">Create student</span>\r\n                </NavLink>\r\n            </li>\r\n            <li className=\"dashboard-admin-nav-list-item\">\r\n                <NavLink \r\n                    to='/admin-details' \r\n                    activeClassName=\"selected\" \r\n                    className=\"dashboard-nav-link\"\r\n                >\r\n                    <span className=\"label-medium\">Update account</span>\r\n                </NavLink>\r\n            </li>\r\n            <li className=\"dashboard-admin-nav-list-item\">\r\n                <NavLink \r\n                    to='/admin-password' \r\n                    activeClassName=\"selected\" \r\n                    className=\"dashboard-nav-link\"\r\n                >\r\n                    <span className=\"label-medium\">Update password</span>\r\n                </NavLink>\r\n            </li>\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default AdminDashboardNav;\r\n","// FORM LIBRARY\r\nimport * as yup from 'yup';\r\n\r\n// PWD REGET EXPRESSION\r\nconst PASSWORD_REGEX = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\r\n\r\n// STUDENT ENROLLMENT SCHEMA\r\nexport const adminSearchSchema = yup.object({\r\n    university: yup.string(),\r\n    searchQuerry: yup.string().matches(/^[ A-Za-z0-9_@./-]*$/g, \"Your querry must contain only alphanumeric chars and the following: _@./-\"),\r\n});\r\n\r\nexport const updateStudentSchema = yup.object({\r\n    first_name: yup.string().required(\"You must enter the first name\").min(3, \"First name should contain al least 3 characters\"),\r\n    last_name: yup.string().required(\"You must enter the last name\").min(3, \"Last name should contain al least 3 characters\"),\r\n    email: yup.string().required(\"You must enter the e-mail adress\").email(\"Please enter a valid e-mail adress\"),\r\n    role: yup.string().required(\"You must enter the desired role\")\r\n});\r\n\r\nexport const createStudentSchema = yup.object({\r\n    first_name: yup.string().required(\"You must enter the first name\").min(3, \"First name should contain al least 3 characters\"),\r\n    last_name: yup.string().required(\"You must enter the last name\").min(3, \"Last name should contain al least 3 characters\"),\r\n    email: yup.string().required(\"You must enter the e-mail adress\").email(\"Please enter a valid e-mail adress\"),\r\n    password: yup.string().required(\"You must enter a password\").matches(PASSWORD_REGEX, \"Your password must contain: minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character\"),\r\n    password_confirm: yup.string().required(\"You must enter a password confirm\").when(\"password\", {\r\n        is: val => (val && val.length > 0 ? true : false),\r\n        then: yup.string().oneOf([yup.ref(\"password\")], \"Your confirm password does not match, please try again\")\r\n    }),\r\n    role: yup.string().required(\"You must enter the desired role\")\r\n});\r\n\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport AdminDashboardNav from '../AdminDashboardNav/AdminDashboardNav';\r\nimport ErrorMessageEl from '../../SharedComponents/FormErrorMessage/ErrorMessage';\r\nimport GeneralErrorMessage from '../../SharedComponents/GeneralErrorMessage/GeneralErrorMessage';\r\nimport ButtonPrimary from '../../SharedComponents/Button/ButtonPrimary';\r\nimport { IconContext } from 'react-icons';\r\nimport { ImEye } from \"react-icons/im\";\r\nimport axios from 'axios';\r\n\r\nimport { useFormik } from 'formik';\r\nimport { createStudentSchema } from '../../../validation/AdminSchema';\r\nimport './AdminDashboardCreateUser.scss';\r\n\r\nfunction AdminDashboardCreateUser() {\r\n\r\n    // STATE\r\n    const [ formError, setFormError ] = useState('');\r\n    const [ visiblePassword, setVisiblePassword ] = useState(false);\r\n    const [ visibleConfirmPassword, setVisibleConfirmPassword ] = useState(false);\r\n    // REF\r\n    const blockRef = useRef(null);  \r\n    // EFFECT\r\n    useEffect(() => {\r\n        setFormError('');\r\n    }, []);\r\n\r\n    // RESET SCROLL POS\r\n    const executeScroll = () => window.scrollTo(0, blockRef.current.offsetTop);  \r\n\r\n    const onSubmit = (values, { resetForm }) => {   \r\n        executeScroll();\r\n\r\n        const reqConfig = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                \"Access-Control-Allow-Origin\": \"*\",\r\n                withCredentials: true,\r\n                credentials: 'include'\r\n            },\r\n        }\r\n\r\n        ///api/v1/users/\r\n\r\n        axios.post(`/api/v1/users/`, values, reqConfig).then((response) => {\r\n            setFormError('Student creat!');\r\n            resetForm();\r\n        }).catch(err => {\r\n            const message = err.response.data.errors ? err.response.data.errors[0].msg : err.response.data.message;\r\n            setFormError(message);\r\n        });\r\n    }\r\n\r\n    // FORM HANDLER\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            first_name:'',\r\n            last_name: '',\r\n            email: '',\r\n            password: '',\r\n            password_confirm: '',\r\n            role:'',\r\n        },\r\n        validateOnBlur: true,\r\n        enableReinitialize: true,\r\n        onSubmit,\r\n        validationSchema: createStudentSchema\r\n    });\r\n\r\n\r\n    return (\r\n        <section className=\"dashboard-account-create\">\r\n            <div className=\"dashboard-account-create-inner\">\r\n                <AdminDashboardNav />\r\n                <div className=\"dashboard-form-block\" ref={blockRef}>\r\n                    <div className=\"dashboard-form-block-heading-wrapper\">\r\n                        <h3 className=\"dashboard-form-title heading-three\">Adauga un student</h3>    \r\n                        {formError ? <GeneralErrorMessage>{formError}</GeneralErrorMessage> : null }    \r\n                    </div>\r\n                    <form className=\"dashboard-account-create-form\" method=\"POST\" onSubmit={ formik.handleSubmit }>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"first_name\" className=\"form-group-label label\">Prenumele studentului.*</label>\r\n                            <input \r\n                                type=\"text\" \r\n                                id=\"first_name\" \r\n                                className=\"form-group-input\" \r\n                                name=\"first_name\"\r\n                                value={formik.values.first_name}\r\n                                onChange={formik.handleChange}\r\n                            />\r\n                        {formik.errors.first_name && <ErrorMessageEl>{formik.errors.first_name}</ErrorMessageEl>}\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"last_name\" className=\"form-group-label label\">Numele studentului.*</label>\r\n                            <input \r\n                                type=\"text\" \r\n                                id=\"last_name\" \r\n                                className=\"form-group-input\"\r\n                                name=\"last_name\"\r\n                                value={formik.values.last_name}\r\n                                onChange={formik.handleChange}\r\n                            />\r\n                            {formik.errors.last_name && <ErrorMessageEl>{formik.errors.last_name}</ErrorMessageEl>}\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"email\" className=\"form-group-label label\">Email-ul studentului.*</label>\r\n                            <input \r\n                                type=\"email\" \r\n                                id=\"email\" \r\n                                className=\"form-group-input\"\r\n                                name=\"email\"\r\n                                value={formik.values.email}\r\n                                onChange={formik.handleChange}\r\n                            />\r\n                            {formik.errors.email && <ErrorMessageEl>{formik.errors.email}</ErrorMessageEl>}       \r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"password\" className=\"form-group-label label\">Parola studentului*</label>\r\n                            <div className=\"input-wrapper\">\r\n                                <input \r\n                                    type={visiblePassword ? \"text\" : \"password\"}\r\n                                    id=\"password\" \r\n                                    className=\"form-group-input\"\r\n                                    name=\"password\"\r\n                                    value={formik.values.password}\r\n                                    onChange={formik.handleChange}\r\n                                />\r\n                                <button type=\"button\" onClick={() => setVisiblePassword(prevState => !prevState)} className=\"show-password-button\">\r\n                                    <IconContext.Provider value={{size: '30px', color: visiblePassword ? '#464646' : '#fafafa'}}>\r\n                                        <ImEye />\r\n                                    </IconContext.Provider>\r\n                                </button>\r\n                            </div>\r\n                            {formik.errors.password && <ErrorMessageEl>{formik.errors.password}</ErrorMessageEl>}  \r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"password_confirm\" className=\"form-group-label label\">Confirma parola studentului*</label>\r\n                            <div className=\"input-wrapper\">\r\n                                <input \r\n                                    type={visibleConfirmPassword ? \"text\" : \"password\"}\r\n                                    id=\"password_confirm\" \r\n                                    className=\"form-group-input\"\r\n                                    name=\"password_confirm\"\r\n                                    value={formik.values.password_confirm}\r\n                                    onChange={formik.handleChange}\r\n                                />\r\n                                <button type=\"button\" onClick={() => setVisibleConfirmPassword(prevState => !prevState)} className=\"show-password-button\">\r\n                                    <IconContext.Provider value={{size: '30px', color: visibleConfirmPassword ? '#464646' : '#fafafa'}}>\r\n                                        <ImEye />\r\n                                    </IconContext.Provider>\r\n                                </button>\r\n                            </div>\r\n                            {formik.errors.password_confirm && <ErrorMessageEl>{formik.errors.password_confirm}</ErrorMessageEl>}  \r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"role\" className=\"form-group-label label\">Rolul dorit.*</label>\r\n                            <input \r\n                                type=\"text\" \r\n                                id=\"role\" \r\n                                className=\"form-group-input\"\r\n                                name=\"role\"\r\n                                value={formik.values.role}\r\n                                onChange={formik.handleChange}\r\n                            />\r\n                            {formik.errors.role && <ErrorMessageEl>{formik.errors.role}</ErrorMessageEl>}       \r\n                        </div>\r\n                        <ButtonPrimary type=\"submit\" textLabel=\"Adauga un student\" />\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default AdminDashboardCreateUser;\r\n","import React from 'react';\r\nimport InitialTransition from '../utils/InitialTransition/InitialTransition';\r\n\r\n// COMPONENTS\r\nimport Header from '../components/LayoutComponents/Header/Header';\r\nimport AuthBanner from '../components/SharedComponents/AuthBanner/AuthBanner';\r\nimport AdminDashboardCreateUser from '../components/AdminDashboard/AdminDashboardCreateUser/AdminDashboardCreateUser';\r\nimport StatsSection from '../components/SharedComponents/StatsSection/StatsSection';\r\nimport Footer from '../components/LayoutComponents/Footer/Footer';\r\n\r\n// DATA\r\nconst bannerData = {\r\n    isLink: null,\r\n    subtitle: 'Adauga studenti'\r\n}\r\n\r\nfunction AdminDashboardCreateAcc() {\r\n    return (\r\n        <>\r\n            <InitialTransition />\r\n            <Header />\r\n            <main className=\"page-content\">\r\n                <AuthBanner sectionData={ bannerData } title=\"Panoul administratorului\"/>    \r\n                <AdminDashboardCreateUser />\r\n                <StatsSection />\r\n            </main>\r\n            <Footer />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AdminDashboardCreateAcc;\r\n","import React from 'react';\r\nimport { IconContext } from 'react-icons';\r\nimport { BsArrowRight } from \"react-icons/bs\";\r\nimport './ButtonPrimary.scss';\r\n\r\nfunction Button({ type, disabled, onClick, textLabel }) {\r\n    return (\r\n        <button type={type} disabled={disabled} onClick={onClick} className=\"button-primary\">\r\n            <span className=\"button-primary-label label\">{textLabel}</span>\r\n            <IconContext.Provider value={{color: '#fafafa', size: '30px'}}>\r\n                <BsArrowRight />\r\n            </IconContext.Provider>\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst ErrorMessageWrapper = styled.div`\r\n    width: 100%;\r\n    padding: 2.5rem 0;\r\n    display: flex;\r\n    justify-content: flex-start;\r\n    align-items: center;\r\n    text-align: start;\r\n    transition: var(--hover-transition);\r\n`;\r\n\r\nconst MessageLabel = styled.p`\r\n    font-size: 1.6rem;\r\n    font-weight: 500;\r\n    letter-spacing: 0.1rem;\r\n    color: #a50000;\r\n    transition: var(--hover-transition);\r\n`;\r\n\r\nfunction ErrorMessageEl ({ children }) {\r\n    return (\r\n        <ErrorMessageWrapper>\r\n            <MessageLabel>{children}</MessageLabel>\r\n        </ErrorMessageWrapper>\r\n    )\r\n}\r\n\r\nexport default ErrorMessageEl;\r\n"],"sourceRoot":""}