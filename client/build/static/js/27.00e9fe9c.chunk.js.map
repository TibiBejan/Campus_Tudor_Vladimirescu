{"version":3,"sources":["components/StudentDashboard/StudentDashboardNav/StudentDashboardNav.js","components/StudentDashboard/StudentDashboardAccount/StudentDashboardAccount.js","pages/StudentDashboardAccountInfo.js"],"names":["StudentDashboardNav","userState","useSelector","userSelector","className","to","user","first_name","last_name","activeClassName","StudentDashboardAccount","dispatch","useDispatch","useState","formError","setFormError","blockRef","useRef","formik","useFormik","initialValues","email","validateOnBlur","enableReinitialize","onSubmit","values","window","scrollTo","current","offsetTop","requestAccountUpdate","axios","patch","headers","withCredentials","credentials","then","response","status","data","receiveAccountUpdate","catch","err","message","errors","msg","updateAccountError","validationSchema","updateAccountDetailsSchema","ref","GeneralErrorMessage","method","handleSubmit","htmlFor","type","id","name","value","onChange","handleChange","ErrorMessage","ButtonPrimary","textLabel","bannerData","isLink","subtitle","StudentDashboardAccountInfo","InitialTransition","Header","AuthBanner","sectionData","StatsSection","Footer"],"mappings":"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","file":"static/js/27.00e9fe9c.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n// REDUX\r\nimport { useSelector } from 'react-redux';\r\nimport { userSelector } from '../../../redux/userSlice';\r\n\r\nimport './StudentDashboardNav.scss';\r\n\r\nfunction StudentDashboardNav() {\r\n\r\n    const userState = useSelector(userSelector);\r\n\r\n    return (\r\n        <ul className=\"dashboard-main-nav\">\r\n            <li className=\"dashboard-nav-list-item\">\r\n                <NavLink \r\n                    to={`/${userState.user.first_name}.${userState.user.last_name}/dashboard`} \r\n                    activeClassName=\"selected\" \r\n                    className=\"dashboard-nav-link\"\r\n                >\r\n                    <span className=\"label-medium\">Dashboard</span>\r\n                </NavLink>\r\n            </li>\r\n            <li className=\"dashboard-nav-list-item\">\r\n                <NavLink \r\n                    to={`/${userState.user.first_name}.${userState.user.last_name}/enrollment`} \r\n                    activeClassName=\"selected\" \r\n                    className=\"dashboard-nav-link\"\r\n                >\r\n                    <span className=\"label-medium\">Enrollment</span>\r\n                </NavLink>\r\n            </li>\r\n            <li className=\"dashboard-nav-list-item\">\r\n                <NavLink \r\n                    to={`/${userState.user.first_name}.${userState.user.last_name}/information`} \r\n                    activeClassName=\"selected\" \r\n                    className=\"dashboard-nav-link\"\r\n                >\r\n                    <span className=\"label-medium\">Information</span>\r\n                </NavLink>\r\n            </li>\r\n            <li className=\"dashboard-nav-list-item\">\r\n                <NavLink \r\n                    to={`/${userState.user.first_name}.${userState.user.last_name}/kins`} \r\n                    activeClassName=\"selected\" \r\n                    className=\"dashboard-nav-link\"\r\n                >\r\n                    <span className=\"label-medium\">Student Kins</span>\r\n                </NavLink>\r\n            </li>\r\n            <li className=\"dashboard-nav-list-item\">\r\n                <NavLink \r\n                    to={`/${userState.user.first_name}.${userState.user.last_name}/update-details`} \r\n                    activeClassName=\"selected\" \r\n                    className=\"dashboard-nav-link\"\r\n                >\r\n                    <span className=\"label-medium\">Update account</span>\r\n                </NavLink>\r\n            </li>\r\n            <li className=\"dashboard-nav-list-item\">\r\n                <NavLink \r\n                    to={`/${userState.user.first_name}.${userState.user.last_name}/update-password`} \r\n                    activeClassName=\"selected\" \r\n                    className=\"dashboard-nav-link\"\r\n                >\r\n                    <span className=\"label-medium\">Update password</span>\r\n                </NavLink>\r\n            </li>\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default StudentDashboardNav;\r\n","import React, { useState, useRef } from 'react';\r\nimport StudentDashboardNav from '../StudentDashboardNav/StudentDashboardNav';\r\nimport ErrorMessageEl from '../../SharedComponents/FormErrorMessage/ErrorMessage';\r\nimport GeneralErrorMessage from '../../SharedComponents/GeneralErrorMessage/GeneralErrorMessage';\r\nimport ButtonPrimary from '../../SharedComponents/Button/ButtonPrimary';\r\nimport axios from 'axios';\r\n\r\nimport { useFormik } from 'formik';\r\nimport { updateAccountDetailsSchema } from '../../../validation/UserSchema';\r\n\r\n// REUDX\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { requestAccountUpdate, receiveAccountUpdate, updateAccountError, userSelector } from '../../../redux/userSlice';\r\nimport './StudentDashboardAccount.scss';\r\n\r\nfunction StudentDashboardAccount() {\r\n\r\n    // GLOBAL STATE SLICE\r\n    const dispatch = useDispatch();\r\n    const userState = useSelector(userSelector);\r\n    // STATE\r\n    const [ formError, setFormError ] = useState('');\r\n    // REF\r\n    const blockRef = useRef(null)\r\n\r\n    // RESET SCROLL POS\r\n    const executeScroll = () => window.scrollTo(0, blockRef.current.offsetTop);  \r\n\r\n    const onSubmit = (values) => {\r\n\r\n        // RESET SCROLL POSITION\r\n        executeScroll();\r\n\r\n        const reqConfig = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                withCredentials: true,\r\n                credentials: 'include'\r\n            },\r\n        }\r\n\r\n        // INIT REQ\r\n        dispatch(requestAccountUpdate());\r\n\r\n        ///api/v1/users/updateMe\r\n\r\n        axios.patch(\"https://campus-tudor-vladimirescu.herokuapp.com/api/v1/users/updateMe\", values, reqConfig).then((response) => {\r\n            if(response.status === 200 || response.status === 201) {\r\n                const { user } = response.data;\r\n                dispatch(receiveAccountUpdate(user));\r\n                setFormError('');\r\n            }\r\n        }).catch(err => {\r\n            const message = err.response.data.errors ? err.response.data.errors[0].msg : err.response.data.message;\r\n            dispatch(updateAccountError(message));\r\n            setFormError(message);\r\n        });\r\n    }\r\n\r\n\r\n    // FORM HANDLER\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            first_name: userState.user.first_name,\r\n            last_name: userState.user.last_name,\r\n            email: userState.user.email\r\n        },\r\n        validateOnBlur: true,\r\n        enableReinitialize: true,\r\n        onSubmit,\r\n        validationSchema: updateAccountDetailsSchema\r\n    });\r\n\r\n    return (\r\n        <section className=\"dashboard-account-update\">\r\n            <div className=\"dashboard-account-update-inner\">\r\n                <StudentDashboardNav />\r\n                <div className=\"dashboard-form-block\" ref={blockRef}>\r\n                    <div className=\"dashboard-form-block-heading-wrapper\">\r\n                        <h3 className=\"dashboard-form-title heading-three\">Actualizeaza-ti informatiile contului</h3>    \r\n                        {formError ? <GeneralErrorMessage>{formError}</GeneralErrorMessage> : null }    \r\n                    </div>\r\n                    <form className=\"dashboard-account-update-form\" method=\"POST\" onSubmit={ formik.handleSubmit }>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"firstName\" className=\"form-group-label label\">Prenumele dvs.*</label>\r\n                            <input \r\n                                type=\"text\" \r\n                                id=\"firstName\" \r\n                                className=\"form-group-input\" \r\n                                name=\"first_name\"\r\n                                value={formik.values.first_name}\r\n                                onChange={formik.handleChange}\r\n                            />\r\n                        {formik.errors.first_name && <ErrorMessageEl>{formik.errors.first_name}</ErrorMessageEl>}\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"lastName\" className=\"form-group-label label\">Numele dvs.*</label>\r\n                            <input \r\n                                type=\"text\" \r\n                                id=\"lastName\" \r\n                                className=\"form-group-input\"\r\n                                name=\"last_name\"\r\n                                value={formik.values.last_name}\r\n                                onChange={formik.handleChange}\r\n                            />\r\n                            {formik.errors.last_name && <ErrorMessageEl>{formik.errors.last_name}</ErrorMessageEl>}\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"email\" className=\"form-group-label label\">Email-ul dvs.*</label>\r\n                            <input \r\n                                type=\"email\" \r\n                                id=\"email\" \r\n                                className=\"form-group-input\"\r\n                                name=\"email\"\r\n                                value={formik.values.email}\r\n                                onChange={formik.handleChange}\r\n                            />\r\n                            {formik.errors.email && <ErrorMessageEl>{formik.errors.email}</ErrorMessageEl>}       \r\n                        </div>\r\n                        <ButtonPrimary type=\"submit\" textLabel=\"Actualizeaza\" />\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default StudentDashboardAccount;\r\n","import React from 'react'\r\nimport InitialTransition from '../utils/InitialTransition/InitialTransition';\r\n\r\n// COMPONENTS\r\nimport Header from '../components/LayoutComponents/Header/Header';\r\nimport AuthBanner from '../components/SharedComponents/AuthBanner/AuthBanner';\r\nimport StudentDashboardAccount from '../components/StudentDashboard/StudentDashboardAccount/StudentDashboardAccount';\r\nimport StatsSection from '../components/SharedComponents/StatsSection/StatsSection';\r\nimport Footer from '../components/LayoutComponents/Footer/Footer';\r\n\r\n// DATA\r\nconst bannerData = {\r\n    isLink: null,\r\n    subtitle: \"Contul meu\"\r\n}\r\n\r\nfunction StudentDashboardAccountInfo() {\r\n    return (\r\n        <>\r\n            <InitialTransition/>\r\n            <Header />\r\n            <main className=\"page-content\">\r\n                <AuthBanner sectionData={ bannerData } />    \r\n                <StudentDashboardAccount />\r\n                <StatsSection />\r\n            </main>\r\n            <Footer /> \r\n        </>\r\n    )\r\n}\r\n\r\nexport default StudentDashboardAccountInfo\r\n"],"sourceRoot":""}