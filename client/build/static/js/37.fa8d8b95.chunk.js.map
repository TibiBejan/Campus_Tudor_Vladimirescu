{"version":3,"sources":["components/AdminDashboard/AdminDashboardPasswordUpdate/AdminDashboardPasswordUpdate.js","pages/AdminDashboardPassword.js"],"names":["AdminDashboardPasswordUpdate","dispatch","useDispatch","useState","formError","setFormError","visibleCurrentPassword","setVisibleCurrentPassword","visiblePassword","setVisiblePassword","visibleConfirmPassword","setVisibleConfirmPassword","blockRef","useRef","onSubmit","values","a","resetForm","window","scrollTo","current","offsetTop","reqConfig","headers","withCredentials","credentials","body","requestUpdatePwd","axios","patch","then","response","status","userData","data","receiveUpdatePwd","catch","err","message","errors","msg","updatePwdError","formik","useFormik","initialValues","password_confirm","password_new","password_new_confirm","validateOnBlur","validationSchema","updatePwdSchema","className","AdminDashboardNav","ref","GeneralErrorMessage","method","handleSubmit","htmlFor","type","id","name","value","onChange","handleChange","onClick","prevState","Provider","size","color","ErrorMessage","ButtonPrimary","textLabel","bannerData","isLink","subtitle","AdminDashboardPassword","InitialTransition","Header","AuthBanner","sectionData","title","StatsSection","Footer"],"mappings":"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","file":"static/js/37.fa8d8b95.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport AdminDashboardNav from '../AdminDashboardNav/AdminDashboardNav';\r\nimport ErrorMessageEl from '../../SharedComponents/FormErrorMessage/ErrorMessage';\r\nimport GeneralErrorMessage from '../../SharedComponents/GeneralErrorMessage/GeneralErrorMessage';\r\nimport ButtonPrimary from '../../SharedComponents/Button/ButtonPrimary';\r\nimport { IconContext } from 'react-icons';\r\nimport { ImEye } from \"react-icons/im\";\r\nimport axios from 'axios';\r\n\r\nimport { useFormik } from 'formik';\r\nimport { updatePwdSchema } from '../../../validation/UserSchema';\r\n\r\n// REUDX\r\nimport { useDispatch } from 'react-redux';\r\nimport { requestUpdatePwd, receiveUpdatePwd, updatePwdError } from '../../../redux/userSlice';\r\n\r\nimport './AdminDashboardPasswordUpdate.scss';\r\n\r\nfunction AdminDashboardPasswordUpdate() {\r\n\r\n    // GLOBAL STATE SLICE\r\n    const dispatch = useDispatch();\r\n    // STATE\r\n    const [ formError, setFormError ] = useState('');\r\n    const [ visibleCurrentPassword, setVisibleCurrentPassword ] = useState(false);\r\n    const [ visiblePassword, setVisiblePassword ] = useState(false);\r\n    const [ visibleConfirmPassword, setVisibleConfirmPassword ] = useState(false);\r\n    // REF\r\n    const blockRef = useRef(null)\r\n\r\n    // RESET SCROLL POS\r\n    const executeScroll = () => window.scrollTo(0, blockRef.current.offsetTop);  \r\n\r\n    const onSubmit = async (values, { resetForm }) => {\r\n        // RESET SCROLL POSITION\r\n        executeScroll();\r\n\r\n        const reqConfig = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                \"Access-Control-Allow-Origin\": \"*\",\r\n                withCredentials: true,\r\n                credentials: 'include'\r\n            },   \r\n        }\r\n\r\n        const body = {...values};\r\n\r\n        // INIT REQ\r\n        dispatch(requestUpdatePwd());\r\n\r\n        ///api/v1/users/updateMyPassword\r\n\r\n        axios.patch(`https://campus-tudor-vladimirescu.herokuapp.com/api/v1/users/updateMyPassword`,  body, reqConfig).then((response) => {\r\n            if(response.status === 200 || response.status === 201) {\r\n                const { userData } = response.data;\r\n                dispatch(receiveUpdatePwd(userData));\r\n                resetForm();\r\n                setFormError('');\r\n            } else {\r\n                setFormError('There is an error, please try again');\r\n            }\r\n        }).catch(err => {\r\n            const message = err.response.data.errors ? err.response.data.errors[0].msg : err.response.data.message;\r\n            setFormError(message);\r\n            dispatch(updatePwdError(message));\r\n        });\r\n    }\r\n\r\n    // FORM HANDLER\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            password_confirm: '',\r\n            password_new: '',\r\n            password_new_confirm: ''\r\n        },\r\n        validateOnBlur: true,\r\n        onSubmit,\r\n        validationSchema: updatePwdSchema\r\n    });\r\n\r\n    return (\r\n        <section className=\"dashboard-admin-password-update\">\r\n            <div className=\"dashboard-admin-password-update-inner\">\r\n                <AdminDashboardNav />\r\n                <div className=\"dashboard-form-block\" ref={blockRef}>\r\n                    <div className=\"dashboard-form-block-heading-wrapper\">\r\n                        <h3 className=\"dashboard-form-title heading-three\">Update password</h3>    \r\n                        {formError ? <GeneralErrorMessage>{formError}</GeneralErrorMessage> : null }    \r\n                    </div>\r\n                    <form className=\"dashboard-password-update-form\" method=\"POST\" onSubmit={ formik.handleSubmit }>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"password_confirm\" className=\"form-group-label label\">Current Password*</label>\r\n                            <div className=\"input-wrapper\">\r\n                                <input \r\n                                    type={visibleCurrentPassword ? \"text\" : \"password\"}\r\n                                    id=\"password_confirm\" \r\n                                    className=\"form-group-input\"\r\n                                    name=\"password_confirm\"\r\n                                    value={formik.values.password_confirm}\r\n                                    onChange={formik.handleChange}\r\n                                />\r\n                                <button type=\"button\" onClick={() => setVisibleCurrentPassword(prevState => !prevState)} className=\"show-password-button\">\r\n                                    <IconContext.Provider value={{size: '30px', color: visibleCurrentPassword ? '#464646' : '#fafafa'}}>\r\n                                        <ImEye />\r\n                                    </IconContext.Provider>\r\n                                </button>\r\n                            </div>\r\n                            {formik.errors.password_confirm && <ErrorMessageEl>{formik.errors.password_confirm}</ErrorMessageEl>}  \r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"password_new\" className=\"form-group-label label\">New Password*</label>\r\n                            <div className=\"input-wrapper\">\r\n                                <input \r\n                                    type={visiblePassword ? \"text\" : \"password\"}\r\n                                    id=\"password_new\" \r\n                                    className=\"form-group-input\"\r\n                                    name=\"password_new\"\r\n                                    value={formik.values.password_new}\r\n                                    onChange={formik.handleChange}\r\n                                />\r\n                                <button type=\"button\" onClick={() => setVisiblePassword(prevState => !prevState)} className=\"show-password-button\">\r\n                                    <IconContext.Provider value={{size: '30px', color: visiblePassword ? '#464646' : '#fafafa'}}>\r\n                                        <ImEye />\r\n                                    </IconContext.Provider>\r\n                                </button>\r\n                            </div>\r\n                            {formik.errors.password_new && <ErrorMessageEl>{formik.errors.password_new}</ErrorMessageEl>}  \r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"password_new_confirm\" className=\"form-group-label label\">Confirm your new password*</label>\r\n                            <div className=\"input-wrapper\">\r\n                                <input \r\n                                    type={visibleConfirmPassword ? \"text\" : \"password\"}\r\n                                    id=\"password_new_confirm\" \r\n                                    className=\"form-group-input\"\r\n                                    name=\"password_new_confirm\"\r\n                                    value={formik.values.password_new_confirm}\r\n                                    onChange={formik.handleChange}\r\n                                />\r\n                                <button type=\"button\" onClick={() => setVisibleConfirmPassword(prevState => !prevState)} className=\"show-password-button\">\r\n                                    <IconContext.Provider value={{size: '30px', color: visibleConfirmPassword ? '#464646' : '#fafafa'}}>\r\n                                        <ImEye />\r\n                                    </IconContext.Provider>\r\n                                </button>\r\n                            </div>\r\n                            {formik.errors.password_new_confirm && <ErrorMessageEl>{formik.errors.password_new_confirm}</ErrorMessageEl>}  \r\n                        </div>\r\n                        <ButtonPrimary type=\"submit\" textLabel=\"Conectare\" />\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default AdminDashboardPasswordUpdate;\r\n","import React from 'react'\r\nimport InitialTransition from '../utils/InitialTransition/InitialTransition';\r\n\r\n// COMPONENTS\r\nimport Header from '../components/LayoutComponents/Header/Header';\r\nimport AuthBanner from '../components/SharedComponents/AuthBanner/AuthBanner';\r\nimport AdminDashboardPasswordUpdate from '../components/AdminDashboard/AdminDashboardPasswordUpdate/AdminDashboardPasswordUpdate';\r\nimport StatsSection from '../components/SharedComponents/StatsSection/StatsSection';\r\nimport Footer from '../components/LayoutComponents/Footer/Footer';\r\n\r\n// DATA\r\nconst bannerData = {\r\n    isLink: null,\r\n    subtitle: \"Contul meu\"\r\n}\r\n\r\nfunction AdminDashboardPassword() {\r\n    return (\r\n        <>\r\n            <InitialTransition />\r\n            <Header/> \r\n            <main className=\"page-content\">\r\n                <AuthBanner sectionData={ bannerData } title=\"Panoul administratorului\"/>    \r\n                <AdminDashboardPasswordUpdate />\r\n                <StatsSection />\r\n            </main>\r\n            <Footer /> \r\n        </>\r\n    )\r\n}\r\n\r\nexport default AdminDashboardPassword"],"sourceRoot":""}