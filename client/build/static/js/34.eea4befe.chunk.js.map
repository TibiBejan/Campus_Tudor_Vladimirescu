{"version":3,"sources":["validation/AuthSchema.js","data/AuthData.js","components/auth/ResetPasswordComponent/ResetPasswordComponent.js","pages/ResetPassword.js"],"names":["PASSWORD_REGEX","loginSchema","yup","email","required","password","matches","registerSchema","first_name","min","last_name","password_confirm","when","is","val","length","then","oneOf","forgotPwdSchema","resetPwdSchema","loginBannerData","isLink","path","pathLabel","subtitle","registerBannerData","forgotPasswordBannerData","resetPasswordBannerData","ResetPasswordComponent","history","useHistory","params","useParams","useState","formError","setFormError","visiblePassword","setVisiblePassword","visibleConfirmPassword","setVisibleConfirmPassword","blockRef","useRef","onSubmit","values","a","window","scrollTo","current","offsetTop","reqConfig","headers","withCredentials","credentials","axios","patch","id","response","status","console","log","push","catch","err","message","data","formik","useFormik","initialValues","validateOnBlur","validationSchema","className","ref","ErrorMessage","method","handleSubmit","htmlFor","type","name","value","onChange","handleChange","onClick","prevState","Provider","size","color","errors","ButtonPrimary","textLabel","ResetPassword","InitialTransition","Header","AuthBanner","sectionData","StatsSection","Footer"],"mappings":"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","file":"static/js/34.eea4befe.chunk.js","sourcesContent":["// FORM LIBRARY\r\nimport * as yup from 'yup';\r\n\r\n// PWD REGET EXPRESSION\r\nconst PASSWORD_REGEX = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\r\n\r\n// LOGIN SCHEMA\r\nexport const loginSchema = yup.object({\r\n    email: yup.string().required(\"You must enter your e-mail adress\").email(\"Please enter a valid e-mail adress\"),\r\n    password: yup.string().required(\"You must enter a password\").matches(PASSWORD_REGEX, \"Your password must contain: minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character\")\r\n});\r\n\r\n// REGISTER SCHEMA\r\nexport const registerSchema = yup.object({\r\n    first_name: yup.string().required(\"You must enter your first name\").min(3, \"Your first name should contain al least 3 characters\"),\r\n    last_name: yup.string().required(\"You must enter your last name\").min(3, \"Your last name should contain al least 3 characters\"),\r\n    email: yup.string().required(\"You must enter your e-mail adress\").email(\"Please enter a valid e-mail adress\"),\r\n    password: yup.string().required(\"You must enter a password\").matches(PASSWORD_REGEX, \"Your password must contain: minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character\"),\r\n    password_confirm: yup.string().required(\"You must enter a password confirm\").when(\"password\", {\r\n        is: val => (val && val.length > 0 ? true : false),\r\n        then: yup.string().oneOf([yup.ref(\"password\")], \"Your confirm password does not match, please try again\")\r\n    })\r\n}); \r\n\r\n// FORGOT PASSWORD SCHEMA\r\nexport const forgotPwdSchema = yup.object({\r\n    email: yup.string().required(\"You must enter your e-mail adress\").email(\"Please enter a valid e-mail adress\"),\r\n});\r\n\r\n// RESET PASSWORD SCHEMA\r\nexport const resetPwdSchema = yup.object({\r\n    password: yup.string().required(\"You must enter a password\").matches(PASSWORD_REGEX, \"Your password must contain: minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character\"),\r\n    password_confirm: yup.string().required(\"You must enter a password confirm\").when(\"password\", {\r\n        is: val => (val && val.length > 0 ? true : false),\r\n        then: yup.string().oneOf([yup.ref(\"password\")], \"Your confirm password does not match, please try again\")\r\n    })\r\n});\r\n\r\n\r\n","export const loginBannerData =  {\r\n    isLink: true,\r\n    path: '/register',\r\n    pathLabel: 'Register',\r\n    subtitle: \"Don't have an account?\"\r\n}\r\n\r\nexport const registerBannerData = {\r\n    isLink: true,\r\n    path: '/login',\r\n    pathLabel: 'Login',\r\n    subtitle: \"Alreaday a member of our family? Join your account\"\r\n}\r\n\r\nexport const forgotPasswordBannerData = {\r\n    isLink: null,\r\n    subtitle: \"Reset your password and join our family.\"\r\n}\r\n\r\nexport const resetPasswordBannerData = {\r\n    isLink: null,\r\n    subtitle: \"Enter a new password and we will redirect you to login page.\"\r\n}\r\n","import React, { useState, useRef } from 'react';\r\nimport ErrorMessageEl from '../../SharedComponents/FormErrorMessage/ErrorMessage';\r\nimport ButtonPrimary from '../../SharedComponents/Button/ButtonPrimary';\r\nimport { IconContext } from 'react-icons';\r\nimport { ImEye } from \"react-icons/im\";\r\n\r\nimport { useFormik } from 'formik';\r\nimport { resetPwdSchema } from '../../../validation/AuthSchema';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nimport './ResetPasswordComponent.scss';\r\n\r\nfunction ResetPasswordComponent() {\r\n\r\n    const history = useHistory();\r\n    const params = useParams();\r\n\r\n    // STATE\r\n    const [ formError, setFormError ] = useState('');\r\n    const [ visiblePassword, setVisiblePassword ] = useState(false);\r\n    const [ visibleConfirmPassword, setVisibleConfirmPassword ] = useState(false);\r\n    // REF\r\n    const blockRef = useRef(null)\r\n\r\n    // RESET SCROLL POS\r\n    const executeScroll = () => window.scrollTo(0, blockRef.current.offsetTop);  \r\n\r\n\r\n    const onSubmit = async (values) => {\r\n        executeScroll();\r\n\r\n        const reqConfig = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                \"Access-Control-Allow-Origin\": \"*\",\r\n                withCredentials: true,\r\n                credentials: 'include'\r\n            },         \r\n        }\r\n\r\n        ///api/v1/users/resetPassword/${params.id}\r\n\r\n        axios.patch(`https://campus-tudor-vladimirescu.herokuapp.com/api/v1/users/resetPassword/${params.id}`,  values, reqConfig).then((response) => {\r\n            if(response.status === 200 || response.status === 201) {\r\n                console.log('Password successfully changed!');\r\n                history.push('/login');\r\n            } else {\r\n                setFormError('There is an error, please try again');\r\n            }\r\n        }).catch(err => {\r\n            const { message } = err.response.data;\r\n            setFormError(message);\r\n        });\r\n    }\r\n\r\n\r\n    // FORM HANDLER\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            password: '',\r\n            password_confirm: '',\r\n        },\r\n        validateOnBlur: true,\r\n        onSubmit,\r\n        validationSchema: resetPwdSchema\r\n    });\r\n\r\n    return (\r\n        <section className=\"reset-password-section\" ref={blockRef}>\r\n            <div className=\"reset-password-section-inner\">\r\n                <div className=\"reset-password-content\">\r\n                    <div className=\"reset-password-paragraph-wrapper\">\r\n                        <p className=\"reset-password-paragraph paragraph-quote-large\">Please fill the fields below to reset your current password, then click the lick below to log in.</p>\r\n                        {formError ? <ErrorMessageEl>{formError}</ErrorMessageEl> : null }\r\n                    </div>\r\n                    <form className=\"reset-password-form\" method=\"POST\" onSubmit={ formik.handleSubmit }>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"password\" className=\"form-group-label label\">Parola dvs..*</label>\r\n                            <div className=\"input-wrapper\">\r\n                                <input \r\n                                    type={visiblePassword ? \"text\" : \"password\"}\r\n                                    id=\"password\" \r\n                                    className=\"form-group-input\"\r\n                                    name=\"password\"\r\n                                    value={formik.values.password}\r\n                                    onChange={formik.handleChange}\r\n                                />\r\n                                <button type=\"button\" onClick={() => setVisiblePassword(prevState => !prevState)} className=\"show-password-button\">\r\n                                    <IconContext.Provider value={{size: '30px', color: visiblePassword ? '#464646' : '#fafafa'}}>\r\n                                        <ImEye />\r\n                                    </IconContext.Provider>\r\n                                </button>\r\n                            </div>\r\n                            {formik.errors.password && <ErrorMessageEl>{formik.errors.password}</ErrorMessageEl>}  \r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"password2\" className=\"form-group-label label\">Confirmati parola dvs..*</label>\r\n                            <div className=\"input-wrapper\">\r\n                                <input \r\n                                    type={visibleConfirmPassword ? \"text\" : \"password\"}\r\n                                    id=\"password2\" \r\n                                    className=\"form-group-input\"\r\n                                    name=\"password_confirm\"\r\n                                    value={formik.values.password_confirm}\r\n                                    onChange={formik.handleChange}\r\n                                />\r\n                                <button type=\"button\" onClick={() => setVisibleConfirmPassword(prevState => !prevState)} className=\"show-password-button\">\r\n                                    <IconContext.Provider value={{size: '30px', color: visibleConfirmPassword ? '#464646' : '#fafafa'}}>\r\n                                        <ImEye />\r\n                                    </IconContext.Provider>\r\n                                </button>\r\n                            </div>\r\n                            {formik.errors.password_confirm && <ErrorMessageEl>{formik.errors.password_confirm}</ErrorMessageEl>}  \r\n                        </div>\r\n                        <ButtonPrimary type=\"submit\" textLabel=\"Reset password\" />\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default ResetPasswordComponent;\r\n","import React from 'react';\r\nimport InitialTransition from '../utils/InitialTransition/InitialTransition';\r\n\r\n// COMPONENTS\r\nimport Header from '../components/LayoutComponents/Header/Header';\r\nimport AuthBanner from '../components/SharedComponents/AuthBanner/AuthBanner';\r\nimport ResetPasswordComponent from '../components/auth/ResetPasswordComponent/ResetPasswordComponent';\r\nimport StatsSection from '../components/SharedComponents/StatsSection/StatsSection';\r\nimport Footer from '../components/LayoutComponents/Footer/Footer';\r\nimport {resetPasswordBannerData} from '../data/AuthData';\r\n\r\nfunction ResetPassword() {\r\n    return (\r\n        <>\r\n            <InitialTransition />\r\n            <Header />\r\n            <main className=\"page-content\">\r\n                <AuthBanner  sectionData={ resetPasswordBannerData }/> \r\n                <ResetPasswordComponent />\r\n                <StatsSection />\r\n            </main>\r\n            <Footer />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ResetPassword;"],"sourceRoot":""}